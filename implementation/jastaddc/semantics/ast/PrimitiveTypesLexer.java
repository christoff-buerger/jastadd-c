/* The following code was generated by JFlex 1.4.2 on 16.09.08 14:13 */

/**
 * Lexer generated with jflex. This lexer is used to recognize the primitive C99 types:
 *  - void
 *  - char
 *  - _Bool 
 *  - signed char
 *  - signed short int
 *  - signed int
 *  - signed long int
 *  - signed long long int
 *  - unsigned char
 *  - unsigned short int
 *  - unsigned int
 *  - unsigned long int
 *  - unsigned long long int
 *  - float
 *  - double
 *  - long double
 *  - float _Complex
 *  - double _Complex
 *  - long double _Complex
 * from a stream formed of the basic input types:
 *  - void
 *  - char
 *  - int
 *  - long
 *  - float
 *  - unsigned
 *  - signed
 *  - double
 *  - Bool
 *  - _Complex
 * The result is an enumeration constant of type jastaddc.semantics.PrimitiveTypes
 * if the input describes a valid basic type. Otherwise an jastaddc.SourceError
 * is thrown.
 * 
 * IMPORTANT: This lexer is used after parsing a C program to support the
 * construction of an AST from the concrete grammar. In the final AST a primitive type
 * is represented by one node with one terminal of type jastaddc.semantics.PrimitiveTypes.
 * 
 * This lexer is needed, as the C99 grammar ([A.2] S.409) allows the construction
 * of invalid basic types.
 * 
 * @author C. BÃ¼rger
 */

package jastaddc.semantics.ast;

import jastaddc.SourceError;

import jastaddc.semantics.PrimitiveTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 16.09.08 14:13 from the specification file
 * <tt>D:/Development/Java/JastAddC/JastAddC/specifications/semantical/CompilerCore/ConcreteToASTMapping/PrimitiveTypesLexer.jflex</tt>
 */
public final class PrimitiveTypesLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\1\1\1\1\1\22\0\1\1\41\0\1\20"+
    "\1\25\33\0\1\17\1\0\1\14\1\24\1\12\1\5\1\11\1\23"+
    "\1\7\1\13\1\4\2\0\1\21\1\26\1\10\1\3\1\27\1\0"+
    "\1\15\1\6\1\22\1\16\1\2\1\0\1\30\14\0\1\1\u1fa2\0"+
    "\1\1\1\1\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\11\1\14\0\1\3\11\0\1\4"+
    "\4\0\1\5\3\0\1\6\6\0\1\7\2\0\1\10"+
    "\2\0\1\11\4\0\1\12\1\3\43\0\1\6\12\0"+
    "\1\13\10\0\1\7\22\0\1\14\1\0\1\3\43\0"+
    "\1\15\1\0\1\5\1\6\24\0\1\13\5\0\1\7"+
    "\26\0\1\14\6\0\1\16\1\0\1\17\24\0\1\20"+
    "\3\0\1\21\3\0\1\6\6\0\1\22\10\0\1\7"+
    "\10\0\1\14\10\0\2\17\10\0\1\20\5\0\1\23"+
    "\1\0\1\23\10\0\1\14\1\0\1\24\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\144\0\175\0\226\0\257"+
    "\0\310\0\341\0\372\0\u0113\0\u012c\0\u0145\0\u015e\0\u0177"+
    "\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d\0\u0226\0\u023f"+
    "\0\u0258\0\u0271\0\u028a\0\u02a3\0\u02bc\0\u02d5\0\u02ee\0\u0307"+
    "\0\u0320\0\u0339\0\31\0\u0352\0\u036b\0\u0384\0\u039d\0\u03b6"+
    "\0\u03cf\0\u03e8\0\u0401\0\u041a\0\u0433\0\u044c\0\u0465\0\u047e"+
    "\0\u0497\0\u04b0\0\u04c9\0\u04e2\0\u04fb\0\31\0\u0514\0\u052d"+
    "\0\u0546\0\u055f\0\u0578\0\u0591\0\u05aa\0\u05c3\0\u05dc\0\u05f5"+
    "\0\u060e\0\u0627\0\u0640\0\u0659\0\u0672\0\u068b\0\u06a4\0\u06bd"+
    "\0\u06d6\0\u06ef\0\u0708\0\u0721\0\u073a\0\u0753\0\u076c\0\u0785"+
    "\0\u079e\0\u07b7\0\u07d0\0\u07e9\0\u0802\0\u081b\0\u0834\0\u084d"+
    "\0\u0866\0\u087f\0\u0898\0\u08b1\0\u08ca\0\u08e3\0\u08fc\0\u0915"+
    "\0\u092e\0\u0947\0\u0960\0\u0979\0\u0992\0\u09ab\0\u09c4\0\u09dd"+
    "\0\u09f6\0\u0a0f\0\u0a28\0\u0a41\0\u0a5a\0\u0a73\0\u0a8c\0\u0aa5"+
    "\0\u0abe\0\u0ad7\0\u0af0\0\u0b09\0\u0b22\0\u0b3b\0\u0b54\0\u0b6d"+
    "\0\u0b86\0\u0b9f\0\u0bb8\0\u0bd1\0\u0bea\0\u0c03\0\u0c1c\0\u0c35"+
    "\0\u0c4e\0\u0c67\0\u0c80\0\u0c99\0\u0cb2\0\u0ccb\0\u0ce4\0\u0cfd"+
    "\0\u0d16\0\u0d2f\0\u0d48\0\u0d61\0\u0d7a\0\u0d93\0\u0dac\0\u0dc5"+
    "\0\u0dde\0\u0df7\0\u0e10\0\u0e29\0\u0e42\0\u0e5b\0\u0e74\0\u0e8d"+
    "\0\u0ea6\0\u0ebf\0\u0ed8\0\u0ef1\0\u0f0a\0\u0f23\0\u0f3c\0\u0f55"+
    "\0\u0f6e\0\u0f87\0\u0fa0\0\u0fb9\0\u0fd2\0\u0feb\0\u1004\0\u101d"+
    "\0\u1036\0\u104f\0\u1068\0\u1081\0\u109a\0\u10b3\0\u10cc\0\u10e5"+
    "\0\u10fe\0\31\0\u1117\0\u1130\0\u1149\0\u1162\0\u117b\0\u1194"+
    "\0\u11ad\0\u11c6\0\u11df\0\u11f8\0\u1211\0\u122a\0\u1243\0\u125c"+
    "\0\u1275\0\u128e\0\u12a7\0\u12c0\0\u12d9\0\u12f2\0\u130b\0\u1324"+
    "\0\u133d\0\u1356\0\u136f\0\u1388\0\u13a1\0\u13ba\0\u13d3\0\u13ec"+
    "\0\u1405\0\u141e\0\u1437\0\u1450\0\u1469\0\u1482\0\u149b\0\u14b4"+
    "\0\u14cd\0\u14e6\0\u14ff\0\u1518\0\u1531\0\u154a\0\u1563\0\u157c"+
    "\0\u1595\0\u15ae\0\u15c7\0\u15e0\0\u15f9\0\u1612\0\u162b\0\u1644"+
    "\0\u165d\0\u1676\0\u168f\0\31\0\u16a8\0\u16c1\0\u16da\0\u16f3"+
    "\0\u170c\0\u1725\0\u173e\0\u1757\0\u1770\0\u1789\0\u17a2\0\u17bb"+
    "\0\u17d4\0\u17ed\0\u1806\0\u181f\0\u1838\0\u1851\0\u186a\0\u1883"+
    "\0\u189c\0\u18b5\0\u18ce\0\u18e7\0\u1900\0\u1919\0\31\0\u1932"+
    "\0\u194b\0\u1964\0\u197d\0\u1996\0\u19af\0\u19c8\0\u19e1\0\u19fa"+
    "\0\u1a13\0\u1a2c\0\u1a45\0\u1a5e\0\u1a77\0\u1a90\0\u1aa9\0\u1ac2"+
    "\0\u1adb\0\u1af4\0\31\0\u1b0d\0\u1b26\0\u1b3f\0\u1b58\0\u1b71"+
    "\0\u1b8a\0\u1ba3\0\u1bbc\0\u1bd5\0\u1bee\0\u1c07\0\u1c20\0\u1c39"+
    "\0\u1c52\0\u1c6b\0\u1c84\0\u1c9d\0\u1cb6\0\31\0\u1ccf\0\u1ce8"+
    "\0\u1d01\0\u1d1a\0\u1d33\0\u1d4c\0\u1d65\0\u1d7e\0\31\0\u1d97"+
    "\0\u1db0\0\u1dc9\0\u1de2\0\u1dfb\0\u1e14\0\u1e2d\0\31\0\u1e46"+
    "\0\u1e5f\0\u1e78\0\u1e91\0\u1eaa\0\u1ec3\0\u1edc\0\u1ef5\0\31"+
    "\0\u1f0e\0\31\0\u1f27\0\u1f40\0\u1f59";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\3\2"+
    "\1\10\3\2\1\11\1\12\1\2\1\13\1\2\1\14"+
    "\5\2\32\0\1\3\32\0\1\15\35\0\1\16\23\0"+
    "\1\17\31\0\1\20\6\0\1\21\30\0\1\22\25\0"+
    "\1\23\40\0\1\24\4\0\1\25\6\0\1\26\46\0"+
    "\1\27\13\0\1\30\46\0\1\31\24\0\1\32\21\0"+
    "\1\33\24\0\1\34\41\0\1\35\22\0\1\36\25\0"+
    "\1\37\30\0\1\40\35\0\1\41\23\0\1\42\32\0"+
    "\1\43\24\0\1\44\53\0\1\45\14\0\1\46\35\0"+
    "\1\47\30\0\1\50\17\0\1\51\27\0\1\52\53\0"+
    "\1\53\11\0\1\54\35\0\1\55\15\0\1\44\4\0"+
    "\1\56\7\0\1\57\2\0\1\60\30\0\1\61\20\0"+
    "\1\62\41\0\1\63\7\0\1\64\36\0\1\65\42\0"+
    "\1\66\36\0\1\67\2\0\1\70\51\0\1\71\12\0"+
    "\1\72\6\0\1\73\25\0\1\74\23\0\1\75\36\0"+
    "\1\76\24\0\1\77\24\0\1\100\30\0\1\64\4\0"+
    "\1\101\7\0\1\102\22\0\1\103\41\0\1\104\10\0"+
    "\1\70\2\0\1\105\1\106\1\107\7\0\1\110\1\111"+
    "\1\0\1\112\10\0\1\113\36\0\1\114\24\0\1\115"+
    "\33\0\1\116\32\0\1\117\21\0\1\120\30\0\1\121"+
    "\30\0\1\100\2\0\1\122\1\0\1\123\7\0\1\124"+
    "\16\0\1\125\34\0\1\126\31\0\1\127\30\0\1\130"+
    "\27\0\1\131\23\0\1\132\31\0\1\133\34\0\1\134"+
    "\45\0\1\135\6\0\1\136\26\0\1\113\15\0\1\137"+
    "\21\0\1\140\35\0\1\141\17\0\1\142\33\0\1\143"+
    "\22\0\1\120\15\0\1\144\1\0\1\145\10\0\1\121"+
    "\2\0\1\146\1\0\1\147\3\0\1\150\6\0\1\151"+
    "\17\0\1\141\24\0\1\152\34\0\1\153\27\0\1\154"+
    "\27\0\1\155\27\0\1\156\53\0\1\157\22\0\1\143"+
    "\24\0\1\160\21\0\1\161\27\0\1\162\25\0\1\163"+
    "\35\0\1\164\45\0\1\165\14\0\1\166\41\0\1\167"+
    "\15\0\1\170\22\0\1\171\54\0\1\172\6\0\1\173"+
    "\35\0\1\174\33\0\1\175\30\0\1\176\20\0\1\177"+
    "\34\0\1\200\27\0\1\201\32\0\1\202\24\0\1\203"+
    "\25\0\1\204\30\0\1\205\53\0\1\206\14\0\1\207"+
    "\24\0\1\210\52\0\1\211\11\0\1\212\24\0\1\213"+
    "\32\0\1\214\24\0\1\215\37\0\1\216\21\0\1\171"+
    "\4\0\1\217\7\0\1\220\2\0\1\221\12\0\1\222"+
    "\35\0\1\223\42\0\1\214\11\0\1\224\41\0\1\225"+
    "\24\0\1\226\30\0\1\227\24\0\1\230\35\0\1\231"+
    "\26\0\1\232\22\0\1\204\2\0\1\233\1\0\1\234"+
    "\3\0\1\235\6\0\1\236\10\0\1\205\3\0\1\237"+
    "\13\0\1\240\1\0\1\241\26\0\1\242\20\0\1\243"+
    "\26\0\1\244\50\0\1\245\2\0\1\246\55\0\1\247"+
    "\3\0\1\250\30\0\1\215\4\0\1\251\7\0\1\252"+
    "\23\0\1\253\23\0\1\254\34\0\1\255\23\0\1\256"+
    "\53\0\1\257\11\0\1\260\36\0\1\261\30\0\1\262"+
    "\22\0\1\263\32\0\1\264\26\0\1\265\26\0\1\262"+
    "\33\0\1\266\30\0\1\267\33\0\1\270\30\0\1\271"+
    "\20\0\1\272\30\0\1\273\30\0\1\274\46\0\1\275"+
    "\20\0\1\260\24\0\1\263\33\0\1\276\41\0\1\277"+
    "\10\0\1\246\2\0\1\300\1\0\1\301\7\0\1\302"+
    "\41\0\1\303\2\0\1\250\4\0\1\304\12\0\1\305"+
    "\13\0\1\306\34\0\1\307\25\0\1\310\32\0\1\311"+
    "\27\0\1\312\32\0\1\313\47\0\1\314\2\0\1\315"+
    "\51\0\1\316\7\0\1\317\34\0\1\316\33\0\1\320"+
    "\31\0\1\321\41\0\1\310\11\0\1\322\41\0\1\323"+
    "\24\0\1\324\36\0\1\325\22\0\1\326\23\0\1\327"+
    "\36\0\1\330\30\0\1\331\27\0\1\332\24\0\1\333"+
    "\34\0\1\334\41\0\1\335\22\0\1\336\20\0\1\337"+
    "\34\0\1\340\27\0\1\341\23\0\1\342\37\0\1\343"+
    "\24\0\1\344\33\0\1\345\42\0\1\346\10\0\1\315"+
    "\15\0\1\347\12\0\1\350\30\0\1\317\2\0\1\351"+
    "\14\0\1\352\20\0\1\353\24\0\1\354\40\0\1\355"+
    "\30\0\1\354\22\0\1\356\45\0\1\357\13\0\1\360"+
    "\35\0\1\361\21\0\1\356\53\0\1\360\22\0\1\345"+
    "\15\0\1\362\27\0\1\363\33\0\1\364\22\0\1\365"+
    "\35\0\1\366\30\0\1\367\24\0\1\370\25\0\1\342"+
    "\4\0\1\371\12\0\1\372\20\0\1\373\26\0\1\374"+
    "\22\0\1\375\40\0\1\376\44\0\1\377\4\0\1\350"+
    "\2\0\1\u0100\34\0\1\u0101\23\0\1\u0102\32\0\1\u0103"+
    "\45\0\1\u0103\7\0\1\u0104\50\0\1\u0105\10\0\1\u0106"+
    "\51\0\1\u0107\16\0\1\u0108\24\0\1\u0109\54\0\1\u0107"+
    "\15\0\1\u010a\22\0\1\u010b\32\0\1\u010c\26\0\1\u010d"+
    "\34\0\1\u010e\20\0\1\u010f\32\0\1\u010b\33\0\1\u0110"+
    "\21\0\1\375\4\0\1\u0111\7\0\1\302\42\0\1\u0112"+
    "\3\0\1\u0113\35\0\1\u010a\42\0\1\u010b\16\0\1\u0114"+
    "\21\0\1\u0115\30\0\1\u0104\2\0\1\u0116\14\0\1\u0117"+
    "\20\0\1\u0112\20\0\1\u0106\3\0\1\u0118\34\0\1\u0119"+
    "\26\0\1\u011a\43\0\1\u011b\7\0\1\u011c\34\0\1\u011b"+
    "\33\0\1\u011d\23\0\1\u011e\35\0\1\u011f\31\0\1\u0120"+
    "\23\0\1\u0121\25\0\1\u0122\55\0\1\u0123\11\0\1\u0124"+
    "\22\0\1\u0115\2\0\1\u0125\34\0\1\u0126\23\0\1\u0127"+
    "\30\0\1\u0128\32\0\1\u0124\33\0\1\u0129\21\0\1\u011c"+
    "\17\0\1\u012a\20\0\1\u012b\34\0\1\u012c\22\0\1\u012d"+
    "\26\0\1\u012e\32\0\1\u012f\22\0\1\u0122\17\0\1\u0130"+
    "\36\0\1\u0131\2\0\1\u0132\37\0\1\u012c\42\0\1\u012d"+
    "\16\0\1\u0133\36\0\1\u0134\23\0\1\u0135\22\0\1\u0136"+
    "\32\0\1\u0137\45\0\1\u0137\7\0\1\u0138\37\0\1\u0139"+
    "\23\0\1\u013a\46\0\1\u013b\10\0\1\u0132\2\0\1\u013c"+
    "\33\0\1\u013d\45\0\1\u013e\11\0\1\u013f\33\0\1\u0140"+
    "\21\0\1\u0138\17\0\1\u0141\20\0\1\u0142\27\0\1\u0143"+
    "\31\0\1\u0144\27\0\1\u0145\21\0\1\u0146\50\0\1\u0147"+
    "\16\0\1\u0148\24\0\1\u0149\32\0\1\u0148\32\0\1\u014a"+
    "\51\0\1\u014a\22\0\1\u0148\7\0\1\u0146\2\0\1\u014b"+
    "\35\0\1\u014a\27\0\1\u014c\30\0\1\u014d\27\0\1\u013f"+
    "\43\0\1\u013f\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\14\0\1\1\11\0\1\11\4\0"+
    "\1\1\3\0\1\1\6\0\1\1\2\0\1\11\2\0"+
    "\1\1\4\0\2\1\43\0\1\1\12\0\1\1\10\0"+
    "\1\1\22\0\1\1\1\0\1\1\43\0\1\1\1\0"+
    "\1\11\1\1\24\0\1\1\5\0\1\1\26\0\1\1"+
    "\6\0\1\11\1\0\1\1\24\0\1\1\3\0\1\11"+
    "\3\0\1\1\6\0\1\1\10\0\1\11\10\0\1\1"+
    "\10\0\1\1\1\11\10\0\1\11\5\0\1\1\1\0"+
    "\1\11\10\0\1\11\1\0\1\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PrimitiveTypesLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PrimitiveTypesLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 86) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PrimitiveTypes createBasicType() throws java.io.IOException, SourceError {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return PrimitiveTypes._float__Complex;
          }
        case 21: break;
        case 3: 
          { return PrimitiveTypes._signed_int;
          }
        case 22: break;
        case 18: 
          { return PrimitiveTypes._double__Complex;
          }
        case 23: break;
        case 8: 
          { return PrimitiveTypes.__Bool;
          }
        case 24: break;
        case 14: 
          { return PrimitiveTypes._unsigned_char;
          }
        case 25: break;
        case 1: 
          { throw new SourceError("Unknown primitive type ["+ yytext() +"].");
          }
        case 26: break;
        case 19: 
          { return PrimitiveTypes._unsigned_long_long_int;
          }
        case 27: break;
        case 11: 
          { return PrimitiveTypes._unsigned_int;
          }
        case 28: break;
        case 12: 
          { return PrimitiveTypes._signed_long_long_int;
          }
        case 29: break;
        case 5: 
          { return PrimitiveTypes._signed_char;
          }
        case 30: break;
        case 16: 
          { return PrimitiveTypes._unsigned_short_int;
          }
        case 31: break;
        case 15: 
          { return PrimitiveTypes._unsigned_long_int;
          }
        case 32: break;
        case 7: 
          { return PrimitiveTypes._signed_short_int;
          }
        case 33: break;
        case 6: 
          { return PrimitiveTypes._signed_long_int;
          }
        case 34: break;
        case 20: 
          { return PrimitiveTypes._long_double__Complex;
          }
        case 35: break;
        case 4: 
          { return PrimitiveTypes._void;
          }
        case 36: break;
        case 13: 
          { return PrimitiveTypes._long_double;
          }
        case 37: break;
        case 10: 
          { return PrimitiveTypes._double;
          }
        case 38: break;
        case 9: 
          { return PrimitiveTypes._float;
          }
        case 39: break;
        case 2: 
          { 
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	/* Beware : The lexer has always to be in the initial state
	   when the end of the input stream is reached, as all non initial
	   states suggest, that some special (complicated) token is scanned/
	   constructed at the moment and it's construction isn't finished yet.*/
	if (yystate() != YYINITIAL)
		throw new SourceError(
			"Invalid basic type ["+ yytext() +
			"]. The ["+ this.getClass().getName() +"] is in state ["+
			yystate() +"] and not it's initial state after finishing lexing the type given.");
	return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
