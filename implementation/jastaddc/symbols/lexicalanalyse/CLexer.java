/* The following code was generated by JFlex 1.4.2 on 19.08.08 03:29 */

/**
 * Lexer for C99 generated with JFlex. The lexer is used for a C
 * front-end developed with JastAdd.
 * 
 * The lexer expects, that translation phases 1 and 2 are done.
 * 
 * It realizes :
 *  - transformation of comments to whitespace, by ignoring them
 *    (part of translation phase 3)
 *  - lexical parts of translation phase 7: ignoring whitespace
 *    (discarding them) and the recognition and creation of token
 * 
 * The lexer does not analyse or execute preprocessing directives :
 *  - translation phase 4 is not executed
 * 
 * Translation phase 5 is not executed and has to be done :
 *  - the translation of source character set members and
 *    escape sequences in constants and string literals to members
 *    of the execution character set
 * Translation phase 6 is not executed and has to be done :
 *  - concatenation of adjacent string literals
 * 
 * The lexer specification is based on the Lex specification by Jeff
 * Lee (1985), which is the base for his grammar specification. Jeff
 * Lee's grammar specification is the base for the C99 grammar
 * (further developed since it's first release in 1985 by the
 * standard committee.). The lexer specification this one is based
 * on can be found at http://www.quut.com/c/ANSI-C-grammar-l-1998.html.
 * 
 * @author C. BÃ¼rger
 * 
 */

package jastaddc.symbols.lexicalanalyse;

import java.io.Reader;
import java.io.StringReader;

import beaver.Symbol;

import jastaddc.symbols.lexicalanalyse.CIntegerConstantLexer;
import jastaddc.symbols.lexicalanalyse.CFloatingConstantLexer;

import jastaddc.syntax.syntacticalanalyse.CParser.Terminals;

import jastaddc.semantics.ast.CharacterConstant;
import jastaddc.semantics.ast.StringLiteral;
import jastaddc.semantics.ast.Identifier;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 19.08.08 03:29 from the specification file
 * <tt>D:/Development/Java/JastAddC/JastAddC/specifications/lexical/CLexer.jflex</tt>
 */
public final class CLexer extends beaver.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\3\1\3\1\1\22\0\1\4\1\76\1\15"+
    "\1\0\1\61\1\72\1\74\1\16\1\67\1\70\1\6\1\22\1\103"+
    "\1\23\1\57\1\5\1\11\7\12\2\10\1\64\1\102\1\63\1\77"+
    "\1\66\1\101\1\0\4\13\1\21\1\27\5\7\1\31\3\7\1\25"+
    "\4\7\1\33\2\7\1\56\2\7\1\62\1\60\1\65\1\100\1\7"+
    "\1\0\1\34\1\37\1\42\1\14\1\20\1\26\1\51\1\44\1\46"+
    "\1\7\1\41\1\30\1\47\1\45\1\36\1\24\1\7\1\40\1\43"+
    "\1\35\1\32\1\55\1\53\1\50\1\54\1\52\1\71\1\17\1\73"+
    "\1\75\6\0\1\3\u1fa2\0\1\3\1\3\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\2\6\1\5"+
    "\2\1\1\7\1\5\1\10\1\11\16\5\1\12\1\1"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\1\37\1\0\3\6"+
    "\1\40\1\0\1\6\1\0\1\5\1\41\1\0\1\42"+
    "\2\0\1\43\1\0\1\44\1\45\3\5\1\46\1\47"+
    "\1\50\1\51\1\52\3\5\2\0\14\5\1\53\4\5"+
    "\1\0\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\0\1\40\1\0\4\6"+
    "\1\40\1\6\1\0\2\5\1\42\1\43\4\5\1\67"+
    "\1\5\1\70\1\0\1\71\1\0\22\5\1\72\4\5"+
    "\1\73\1\74\1\75\1\35\1\0\2\5\1\76\1\77"+
    "\2\5\1\100\1\70\1\71\2\5\1\101\5\5\1\102"+
    "\2\5\1\103\7\5\1\104\2\5\1\105\3\5\1\106"+
    "\1\5\1\107\1\5\1\110\4\5\1\111\2\5\1\112"+
    "\4\5\1\113\2\5\1\114\1\115\2\5\1\116\3\5"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\5\1\125"+
    "\1\5\1\126\4\5\1\127\1\130\1\131\1\132\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\104\0\314\0\u0110\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"+
    "\0\104\0\u083c\0\u0880\0\104\0\u08c4\0\104\0\104\0\104"+
    "\0\u0908\0\104\0\u094c\0\104\0\u0990\0\u09d4\0\u0a18\0\104"+
    "\0\104\0\104\0\u0a5c\0\u0aa0\0\104\0\104\0\u0ae4\0\u0b28"+
    "\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0264\0\104\0\u0d8c\0\u02a8\0\104\0\u0dd0\0\104\0\104"+
    "\0\u0e14\0\u0e58\0\u0e9c\0\104\0\104\0\104\0\104\0\104"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u0154\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\104\0\u1540\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\u1584\0\u15c8\0\u160c\0\u1650\0\104\0\u1694"+
    "\0\u16d8\0\104\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u0264\0\u02a8"+
    "\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u0154\0\u193c\0\104\0\u1980"+
    "\0\104\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u0154\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\104\0\104\0\104\0\104\0\u1fe0\0\u2024\0\u2068"+
    "\0\u0154\0\u0154\0\u20ac\0\u20f0\0\u0154\0\u0fac\0\u0ff0\0\u2134"+
    "\0\u2178\0\u0154\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u0154"+
    "\0\u2310\0\u2354\0\u0154\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u0154\0\u2574\0\u25b8\0\u0154\0\u25fc\0\u2640"+
    "\0\u2684\0\u0154\0\u26c8\0\u0154\0\u270c\0\u0154\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u0154\0\u2860\0\u28a4\0\u0154\0\u28e8\0\u292c"+
    "\0\u2970\0\u29b4\0\u0154\0\u29f8\0\u2a3c\0\u0154\0\u0154\0\u2a80"+
    "\0\u2ac4\0\u0154\0\u2b08\0\u2b4c\0\u2b90\0\u0154\0\u0154\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u2bd4\0\u0154\0\u2c18\0\u0154\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\10\1\7\1\12\1\13\1\14\1\15\1\16\1\7"+
    "\1\17\1\20\2\7\1\21\1\7\1\22\1\23\1\24"+
    "\1\7\1\25\1\26\1\7\1\27\1\30\1\7\1\31"+
    "\1\32\2\7\1\33\2\7\1\34\1\7\1\35\1\7"+
    "\1\36\1\7\1\37\1\2\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\106\0"+
    "\1\4\106\0\1\63\1\64\70\0\1\65\103\0\1\66"+
    "\13\0\6\7\3\0\2\7\2\0\33\7\35\0\3\10"+
    "\5\0\2\67\6\0\1\70\1\71\2\72\23\0\1\73"+
    "\34\0\1\74\2\75\5\0\2\67\6\0\1\70\1\71"+
    "\2\72\14\0\1\76\5\0\1\76\1\73\33\0\6\7"+
    "\3\0\1\77\1\7\2\0\12\7\1\100\20\7\25\0"+
    "\1\101\3\0\11\101\1\102\1\101\1\0\40\101\1\103"+
    "\23\101\1\104\3\0\12\104\1\105\1\0\40\104\1\106"+
    "\23\104\17\0\1\107\57\0\1\110\13\0\6\7\3\0"+
    "\2\7\2\0\4\7\1\111\14\7\1\112\2\7\1\113"+
    "\6\7\47\0\1\114\54\0\1\115\27\0\1\116\42\0"+
    "\1\117\10\0\1\120\13\0\6\7\3\0\2\7\2\0"+
    "\4\7\1\121\5\7\1\122\20\7\34\0\6\7\3\0"+
    "\2\7\2\0\12\7\1\123\20\7\34\0\6\7\1\124"+
    "\1\125\1\0\2\7\2\0\33\7\34\0\6\7\3\0"+
    "\2\7\2\0\21\7\1\126\11\7\34\0\6\7\3\0"+
    "\2\7\2\0\6\7\1\127\24\7\34\0\6\7\3\0"+
    "\2\7\2\0\30\7\1\130\2\7\34\0\6\7\3\0"+
    "\2\7\2\0\14\7\1\131\16\7\34\0\6\7\3\0"+
    "\1\132\1\7\2\0\33\7\34\0\6\7\3\0\2\7"+
    "\2\0\10\7\1\133\1\7\1\134\5\7\1\135\12\7"+
    "\34\0\6\7\3\0\2\7\2\0\11\7\1\136\6\7"+
    "\1\137\1\7\1\140\4\7\1\141\3\7\34\0\6\7"+
    "\3\0\2\7\2\0\2\7\1\142\16\7\1\143\11\7"+
    "\34\0\6\7\3\0\2\7\2\0\12\7\1\144\20\7"+
    "\34\0\6\7\3\0\2\7\2\0\20\7\1\145\12\7"+
    "\34\0\6\7\3\0\2\7\2\0\12\7\1\146\20\7"+
    "\35\0\3\73\44\0\1\147\33\0\1\150\3\0\2\150"+
    "\3\0\2\150\2\0\33\150\110\0\1\151\1\41\5\0"+
    "\1\50\4\0\1\152\72\0\1\44\103\0\1\153\10\0"+
    "\1\154\72\0\1\52\10\0\1\155\100\0\1\156\2\0"+
    "\1\157\103\0\1\160\103\0\1\161\103\0\1\162\4\0"+
    "\1\63\2\0\101\63\6\64\1\163\75\64\10\0\3\164"+
    "\7\0\2\165\110\0\1\166\1\0\2\167\101\0\1\166"+
    "\2\167\100\0\1\170\1\171\62\0\3\73\5\0\2\67"+
    "\4\0\4\172\62\0\3\74\5\0\2\67\35\0\1\73"+
    "\34\0\1\74\2\75\5\0\2\67\6\0\1\70\1\71"+
    "\2\72\23\0\1\73\34\0\5\173\3\0\2\173\4\0"+
    "\2\173\4\0\1\173\2\0\1\173\2\0\1\173\14\0"+
    "\1\174\33\0\6\7\3\0\2\7\2\0\2\7\1\175"+
    "\30\7\34\0\6\7\3\0\2\7\2\0\6\7\1\176"+
    "\24\7\25\0\1\101\3\0\11\101\1\177\1\101\1\0"+
    "\40\101\1\103\23\101\1\104\3\0\12\104\1\200\1\0"+
    "\40\104\1\106\23\104\7\0\6\7\3\0\2\7\2\0"+
    "\17\7\1\201\13\7\34\0\6\7\3\0\2\7\2\0"+
    "\6\7\1\202\24\7\34\0\6\7\3\0\2\7\2\0"+
    "\11\7\1\203\21\7\34\0\6\7\3\0\2\7\2\0"+
    "\12\7\1\204\20\7\34\0\6\7\3\0\2\7\2\0"+
    "\14\7\1\205\16\7\34\0\6\7\3\0\2\7\2\0"+
    "\21\7\1\206\11\7\25\0\1\124\3\0\11\124\1\207"+
    "\1\124\1\0\40\124\1\210\23\124\1\125\3\0\12\125"+
    "\1\211\1\0\40\125\1\212\23\125\7\0\6\7\3\0"+
    "\2\7\2\0\17\7\1\213\2\7\1\214\10\7\34\0"+
    "\6\7\3\0\2\7\2\0\11\7\1\215\21\7\34\0"+
    "\6\7\3\0\2\7\2\0\1\216\32\7\34\0\6\7"+
    "\3\0\1\217\1\7\2\0\33\7\34\0\6\7\3\0"+
    "\2\7\2\0\11\7\1\220\5\7\1\221\5\7\1\222"+
    "\5\7\34\0\6\7\3\0\2\7\2\0\17\7\1\223"+
    "\13\7\34\0\6\7\3\0\2\7\2\0\21\7\1\224"+
    "\11\7\34\0\6\7\3\0\2\7\2\0\10\7\1\225"+
    "\22\7\34\0\6\7\3\0\2\7\2\0\10\7\1\226"+
    "\3\7\1\227\16\7\34\0\6\7\3\0\2\7\2\0"+
    "\12\7\1\230\20\7\34\0\6\7\3\0\2\7\2\0"+
    "\25\7\1\231\1\232\4\7\34\0\6\7\3\0\2\7"+
    "\2\0\22\7\1\233\10\7\34\0\6\7\3\0\2\7"+
    "\2\0\4\7\1\234\4\7\1\235\21\7\34\0\6\7"+
    "\3\0\2\7\2\0\11\7\1\236\21\7\34\0\6\7"+
    "\3\0\2\7\2\0\22\7\1\237\10\7\34\0\6\7"+
    "\3\0\2\7\2\0\4\7\1\240\15\7\1\241\10\7"+
    "\104\0\1\242\33\0\6\150\3\0\2\150\2\0\33\150"+
    "\124\0\1\243\103\0\1\244\4\0\5\64\1\245\1\163"+
    "\75\64\10\0\3\164\13\0\4\172\62\0\3\164\123\0"+
    "\2\167\100\0\1\167\104\0\1\167\62\0\5\173\3\0"+
    "\2\173\2\0\2\67\2\173\1\70\1\71\2\72\1\173"+
    "\2\0\1\173\2\0\1\173\14\0\1\246\34\0\5\246"+
    "\3\0\2\246\4\0\2\246\4\0\1\246\2\0\1\246"+
    "\2\0\1\246\50\0\6\7\3\0\2\7\2\0\10\7"+
    "\1\247\22\7\34\0\6\7\3\0\2\7\2\0\13\7"+
    "\1\250\17\7\34\0\6\7\3\0\1\251\1\7\2\0"+
    "\33\7\34\0\6\7\3\0\2\7\2\0\23\7\1\252"+
    "\7\7\34\0\6\7\3\0\1\253\1\7\2\0\33\7"+
    "\34\0\6\7\3\0\2\7\2\0\10\7\1\254\22\7"+
    "\34\0\6\7\3\0\2\7\2\0\25\7\1\255\5\7"+
    "\25\0\1\124\3\0\11\124\1\256\1\124\1\0\40\124"+
    "\1\210\23\124\1\125\3\0\12\125\1\257\1\0\40\125"+
    "\1\212\23\125\7\0\6\7\3\0\2\7\2\0\22\7"+
    "\1\260\10\7\34\0\6\7\3\0\2\7\2\0\12\7"+
    "\1\261\20\7\34\0\6\7\3\0\2\7\2\0\12\7"+
    "\1\262\20\7\34\0\6\7\3\0\1\263\1\7\2\0"+
    "\33\7\34\0\6\7\3\0\2\7\2\0\10\7\1\264"+
    "\22\7\34\0\6\7\3\0\2\7\2\0\6\7\1\265"+
    "\24\7\34\0\6\7\3\0\2\7\2\0\11\7\1\266"+
    "\21\7\34\0\6\7\3\0\2\7\2\0\22\7\1\267"+
    "\10\7\34\0\6\7\3\0\1\270\1\7\2\0\33\7"+
    "\34\0\6\7\3\0\2\7\2\0\11\7\1\271\5\7"+
    "\1\272\13\7\34\0\6\7\3\0\2\7\2\0\14\7"+
    "\1\273\16\7\34\0\6\7\3\0\2\7\2\0\11\7"+
    "\1\274\21\7\34\0\6\7\3\0\2\7\2\0\6\7"+
    "\1\275\24\7\34\0\6\7\3\0\2\7\2\0\14\7"+
    "\1\276\16\7\34\0\6\7\3\0\2\7\2\0\21\7"+
    "\1\277\11\7\34\0\6\7\3\0\1\300\1\7\2\0"+
    "\33\7\34\0\6\7\3\0\2\7\2\0\11\7\1\301"+
    "\21\7\34\0\6\7\3\0\2\7\2\0\22\7\1\302"+
    "\10\7\34\0\6\7\3\0\2\7\2\0\12\7\1\303"+
    "\20\7\34\0\6\7\3\0\2\7\2\0\4\7\1\304"+
    "\26\7\34\0\6\7\3\0\2\7\2\0\10\7\1\305"+
    "\22\7\34\0\5\7\1\306\3\0\2\7\2\0\33\7"+
    "\35\0\5\246\3\0\2\246\2\0\2\67\2\246\4\0"+
    "\1\246\2\0\1\246\2\0\1\246\50\0\6\7\3\0"+
    "\2\7\2\0\6\7\1\307\24\7\34\0\6\7\3\0"+
    "\2\7\2\0\4\7\1\310\26\7\34\0\6\7\3\0"+
    "\2\7\2\0\14\7\1\311\16\7\34\0\6\7\3\0"+
    "\2\7\2\0\11\7\1\312\21\7\34\0\6\7\3\0"+
    "\2\7\2\0\25\7\1\313\5\7\34\0\6\7\3\0"+
    "\2\7\2\0\21\7\1\314\11\7\34\0\5\7\1\315"+
    "\3\0\2\7\2\0\33\7\34\0\6\7\3\0\2\7"+
    "\2\0\15\7\1\316\15\7\34\0\6\7\3\0\2\7"+
    "\2\0\14\7\1\317\16\7\34\0\6\7\3\0\2\7"+
    "\2\0\14\7\1\320\16\7\34\0\6\7\3\0\2\7"+
    "\2\0\17\7\1\321\13\7\34\0\6\7\3\0\2\7"+
    "\2\0\22\7\1\322\10\7\34\0\6\7\3\0\2\7"+
    "\2\0\11\7\1\323\21\7\34\0\6\7\3\0\2\7"+
    "\2\0\22\7\1\324\10\7\34\0\6\7\3\0\2\7"+
    "\2\0\16\7\1\325\14\7\34\0\6\7\3\0\2\7"+
    "\2\0\11\7\1\326\21\7\34\0\6\7\3\0\1\327"+
    "\1\7\2\0\33\7\34\0\6\7\3\0\2\7\2\0"+
    "\12\7\1\330\20\7\34\0\6\7\3\0\2\7\2\0"+
    "\16\7\1\331\14\7\34\0\6\7\3\0\2\7\2\0"+
    "\21\7\1\332\11\7\34\0\6\7\3\0\1\333\1\7"+
    "\2\0\33\7\34\0\6\7\3\0\2\7\2\0\11\7"+
    "\1\334\21\7\34\0\6\7\3\0\2\7\2\0\4\7"+
    "\1\335\26\7\34\0\6\7\3\0\1\336\1\7\2\0"+
    "\33\7\34\0\6\7\3\0\2\7\2\0\21\7\1\337"+
    "\11\7\34\0\6\7\3\0\2\7\2\0\21\7\1\340"+
    "\11\7\34\0\6\7\3\0\1\341\1\7\2\0\33\7"+
    "\34\0\6\7\3\0\2\7\2\0\21\7\1\342\11\7"+
    "\34\0\6\7\3\0\2\7\2\0\22\7\1\343\10\7"+
    "\34\0\6\7\3\0\2\7\2\0\11\7\1\344\21\7"+
    "\34\0\6\7\3\0\2\7\2\0\21\7\1\345\11\7"+
    "\34\0\6\7\3\0\2\7\2\0\16\7\1\346\14\7"+
    "\34\0\6\7\3\0\2\7\2\0\11\7\1\347\21\7"+
    "\34\0\5\7\1\350\3\0\2\7\2\0\33\7\34\0"+
    "\6\7\3\0\2\7\2\0\2\7\1\351\30\7\34\0"+
    "\6\7\3\0\2\7\2\0\20\7\1\352\12\7\34\0"+
    "\6\7\3\0\1\353\1\7\2\0\33\7\34\0\6\7"+
    "\3\0\2\7\2\0\22\7\1\354\10\7\34\0\6\7"+
    "\3\0\2\7\2\0\11\7\1\355\21\7\34\0\6\7"+
    "\3\0\1\356\1\7\2\0\33\7\34\0\6\7\3\0"+
    "\2\7\2\0\2\7\1\357\30\7\34\0\6\7\3\0"+
    "\2\7\2\0\16\7\1\360\14\7\34\0\6\7\3\0"+
    "\1\361\1\7\2\0\33\7\34\0\6\7\3\0\2\7"+
    "\2\0\6\7\1\362\24\7\34\0\6\7\3\0\2\7"+
    "\2\0\4\7\1\363\26\7\34\0\5\7\1\364\3\0"+
    "\2\7\2\0\33\7\34\0\6\7\3\0\2\7\2\0"+
    "\11\7\1\365\21\7\34\0\6\7\3\0\2\7\2\0"+
    "\14\7\1\366\16\7\34\0\6\7\3\0\1\367\1\7"+
    "\2\0\33\7\34\0\6\7\3\0\1\370\1\7\2\0"+
    "\33\7\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11628];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\34\1\1\11\2\1\1\11"+
    "\1\1\3\11\1\1\1\11\1\1\1\11\3\1\3\11"+
    "\1\1\1\0\2\11\1\0\4\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\11\2\0\1\11\1\0\2\11\3\1"+
    "\5\11\3\1\2\0\21\1\1\0\2\1\1\11\1\1"+
    "\7\11\1\0\1\1\1\0\1\1\1\11\2\1\1\11"+
    "\1\1\1\0\12\1\1\11\1\0\1\11\1\0\27\1"+
    "\4\11\1\0\122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private CIntegerConstantLexer integerLexer;
	private CFloatingConstantLexer floatLexer;
	
	private Symbol createPrimitiveToken(short id) {
		return new Symbol(id, yyline, yycolumn, yylength(), yytext());
	}

	private Symbol createPrimitiveToken(short id, Object value) {
		return new Symbol(id, yyline, yycolumn, yylength(), value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
  	integerLexer = new CIntegerConstantLexer((Reader)null);
	floatLexer = new CFloatingConstantLexer((Reader)null);
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, CUnknownTokenException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return createPrimitiveToken(Terminals.pLESSER);
          }
        case 92: break;
        case 90: 
          { return createPrimitiveToken(Terminals.kCONTINUE);
          }
        case 93: break;
        case 27: 
          { return createPrimitiveToken(Terminals.pSEMICOLON);
          }
        case 94: break;
        case 52: 
          { return createPrimitiveToken(Terminals.pEXCLAMATIONMARK_EQUALS);
          }
        case 95: break;
        case 44: 
          { return createPrimitiveToken(
								Terminals.TYPEDEF_NAME,
								new Identifier(yytext().substring(1)));
          }
        case 96: break;
        case 54: 
          { return createPrimitiveToken(Terminals.pARROWUP_EQUALS);
          }
        case 97: break;
        case 34: 
          { return createPrimitiveToken(
								Terminals.STRING_LITERAL,
								new StringLiteral(
										yytext(),
										yytext().substring(1, yytext().length() - 1),
										false));
          }
        case 98: break;
        case 2: 
          { /* Ignore whitespace */
          }
        case 99: break;
        case 38: 
          { return createPrimitiveToken(Terminals.pPLUS_PLUS);
          }
        case 100: break;
        case 85: 
          { return createPrimitiveToken(Terminals.kDEFAULT);
          }
        case 101: break;
        case 69: 
          { return createPrimitiveToken(Terminals.kVOID);
          }
        case 102: break;
        case 66: 
          { return createPrimitiveToken(Terminals.kCASE);
          }
        case 103: break;
        case 43: 
          { return createPrimitiveToken(Terminals.kIF);
          }
        case 104: break;
        case 84: 
          { return createPrimitiveToken(Terminals.kINLINE);
          }
        case 105: break;
        case 20: 
          { return createPrimitiveToken(Terminals.pBRACKETCLOSECURLY);
          }
        case 106: break;
        case 55: 
          { return createPrimitiveToken(Terminals.kFOR);
          }
        case 107: break;
        case 4: 
          { return createPrimitiveToken(Terminals.pSTAR);
          }
        case 108: break;
        case 72: 
          { return createPrimitiveToken(Terminals.kBREAK);
          }
        case 109: break;
        case 76: 
          { return createPrimitiveToken(Terminals.kDOUBLE);
          }
        case 110: break;
        case 86: 
          { return createPrimitiveToken(Terminals.kTYPEDEF);
          }
        case 111: break;
        case 40: 
          { return createPrimitiveToken(Terminals.pMINUS_MINUS);
          }
        case 112: break;
        case 45: 
          { return createPrimitiveToken(Terminals.pLESSER_LESSER);
          }
        case 113: break;
        case 83: 
          { return createPrimitiveToken(Terminals.kSWITCH);
          }
        case 114: break;
        case 37: 
          { return createPrimitiveToken(Terminals.pLINEVERTICAL_EQUALS);
          }
        case 115: break;
        case 60: 
          { return createPrimitiveToken(Terminals.pLESSER_LESSER_EQUALS);
          }
        case 116: break;
        case 26: 
          { return createPrimitiveToken(Terminals.pQUESTIONMARK);
          }
        case 117: break;
        case 32: 
          { floatLexer.initialize(yyline, yycolumn, new StringReader(yytext()));
						return createPrimitiveToken(
								Terminals.CONSTANT, floatLexer.createFloatingPointConstant());
          }
        case 118: break;
        case 42: 
          { return createPrimitiveToken(Terminals.pMINUS_EQUALS);
          }
        case 119: break;
        case 77: 
          { return createPrimitiveToken(Terminals.kEXTERN);
          }
        case 120: break;
        case 21: 
          { return createPrimitiveToken(Terminals.pAND);
          }
        case 121: break;
        case 61: 
          { return createPrimitiveToken(Terminals.pGREATER_GREATER_EQUALS);
          }
        case 122: break;
        case 70: 
          { return createPrimitiveToken(Terminals.kFLOAT);
          }
        case 123: break;
        case 56: 
          { return createPrimitiveToken(
								Terminals.STRING_LITERAL,
								new StringLiteral(
										yytext(),
										yytext().substring(2, yytext().length() - 1),
										true));
          }
        case 124: break;
        case 62: 
          { return createPrimitiveToken(Terminals.kELSE);
          }
        case 125: break;
        case 18: 
          { return createPrimitiveToken(Terminals.pBRACKETOPENCURLY);
          }
        case 126: break;
        case 25: 
          { return createPrimitiveToken(Terminals.pARROWUP);
          }
        case 127: break;
        case 24: 
          { return createPrimitiveToken(Terminals.pEQUALS);
          }
        case 128: break;
        case 41: 
          { return createPrimitiveToken(Terminals.pMINUS_GREATER);
          }
        case 129: break;
        case 51: 
          { return createPrimitiveToken(Terminals.pAND_EQUALS);
          }
        case 130: break;
        case 15: 
          { return createPrimitiveToken(Terminals.pGREATER);
          }
        case 131: break;
        case 58: 
          { return createPrimitiveToken(Terminals.kINT);
          }
        case 132: break;
        case 48: 
          { return createPrimitiveToken(Terminals.pGREATER_EQUALS);
          }
        case 133: break;
        case 82: 
          { return createPrimitiveToken(Terminals.kSIZEOF);
          }
        case 134: break;
        case 89: 
          { return createPrimitiveToken(Terminals.kREGISTER);
          }
        case 135: break;
        case 75: 
          { return createPrimitiveToken(Terminals.kWHILE);
          }
        case 136: break;
        case 31: 
          { return createPrimitiveToken(Terminals.pSTAR_EQUALS);
          }
        case 137: break;
        case 35: 
          { return createPrimitiveToken(
								Terminals.CONSTANT,
								new CharacterConstant(
										yytext(),
										yytext().substring(1, yytext().length() - 1),
										false));
          }
        case 138: break;
        case 80: 
          { return createPrimitiveToken(Terminals.kSTRUCT);
          }
        case 139: break;
        case 87: 
          { return createPrimitiveToken(Terminals.kUNSIGNED);
          }
        case 140: break;
        case 57: 
          { return createPrimitiveToken(
								Terminals.CONSTANT,
								new CharacterConstant(
										yytext(),
										yytext().substring(2, yytext().length() - 1),
										true));
          }
        case 141: break;
        case 6: 
          { integerLexer.initialize(yyline, yycolumn, new StringReader(yytext()));
						return createPrimitiveToken(
								Terminals.CONSTANT, integerLexer.createIntegerConstant());
          }
        case 142: break;
        case 36: 
          { return createPrimitiveToken(Terminals.pLINEVERTICAL_LINEVERTICAL);
          }
        case 143: break;
        case 23: 
          { return createPrimitiveToken(Terminals.pEXCLAMATIONMARK);
          }
        case 144: break;
        case 71: 
          { return createPrimitiveToken(Terminals.kUNION);
          }
        case 145: break;
        case 9: 
          { return createPrimitiveToken(Terminals.pMINUS);
          }
        case 146: break;
        case 17: 
          { return createPrimitiveToken(Terminals.pBRACKETCLOSEROUND);
          }
        case 147: break;
        case 78: 
          { return createPrimitiveToken(Terminals.kRETURN);
          }
        case 148: break;
        case 64: 
          { return createPrimitiveToken(Terminals.kLONG);
          }
        case 149: break;
        case 33: 
          { return createPrimitiveToken(Terminals.kDO);
          }
        case 150: break;
        case 46: 
          { return createPrimitiveToken(Terminals.pLESSER_EQUALS);
          }
        case 151: break;
        case 59: 
          { return createPrimitiveToken(Terminals.pPOINT_POINT_POINT);
          }
        case 152: break;
        case 30: 
          { return createPrimitiveToken(Terminals.pSLASH_EQUALS);
          }
        case 153: break;
        case 65: 
          { return createPrimitiveToken(Terminals.kAUTO);
          }
        case 154: break;
        case 13: 
          { return createPrimitiveToken(Terminals.pCOLON);
          }
        case 155: break;
        case 81: 
          { return createPrimitiveToken(Terminals.kSIGNED);
          }
        case 156: break;
        case 22: 
          { return createPrimitiveToken(Terminals.pTILDE);
          }
        case 157: break;
        case 5: 
          { return createPrimitiveToken(
								Terminals.IDENTIFIER,
								new Identifier(yytext()));
          }
        case 158: break;
        case 63: 
          { return createPrimitiveToken(Terminals.kENUM);
          }
        case 159: break;
        case 47: 
          { return createPrimitiveToken(Terminals.pGREATER_GREATER);
          }
        case 160: break;
        case 14: 
          { return createPrimitiveToken(Terminals.pBRACKETCLOSESQUARE);
          }
        case 161: break;
        case 1: 
          { throw new CUnknownTokenException(yyline,
							yycolumn,
							yytext());
          }
        case 162: break;
        case 79: 
          { return createPrimitiveToken(Terminals.kSTATIC);
          }
        case 163: break;
        case 8: 
          { return createPrimitiveToken(Terminals.pPLUS);
          }
        case 164: break;
        case 68: 
          { return createPrimitiveToken(Terminals.kGOTO);
          }
        case 165: break;
        case 53: 
          { return createPrimitiveToken(Terminals.pEQUALS_EQUALS);
          }
        case 166: break;
        case 10: 
          { return createPrimitiveToken(Terminals.pPOINT);
          }
        case 167: break;
        case 39: 
          { return createPrimitiveToken(Terminals.pPLUS_EQUALS);
          }
        case 168: break;
        case 74: 
          { return createPrimitiveToken(Terminals.kSHORT);
          }
        case 169: break;
        case 7: 
          { return createPrimitiveToken(Terminals.pLINEVERTICAL);
          }
        case 170: break;
        case 3: 
          { return createPrimitiveToken(Terminals.pSLASH);
          }
        case 171: break;
        case 49: 
          { return createPrimitiveToken(Terminals.pPRECENT_EQUALS);
          }
        case 172: break;
        case 50: 
          { return createPrimitiveToken(Terminals.pAND_AND);
          }
        case 173: break;
        case 88: 
          { return createPrimitiveToken(Terminals.kRESTRICT);
          }
        case 174: break;
        case 91: 
          { return createPrimitiveToken(Terminals.kVOLATILE);
          }
        case 175: break;
        case 28: 
          { return createPrimitiveToken(Terminals.pCOMMA);
          }
        case 176: break;
        case 67: 
          { return createPrimitiveToken(Terminals.kCHAR);
          }
        case 177: break;
        case 11: 
          { return createPrimitiveToken(Terminals.pBRACKETOPENSQUARE);
          }
        case 178: break;
        case 16: 
          { return createPrimitiveToken(Terminals.pBRACKETOPENROUND);
          }
        case 179: break;
        case 19: 
          { return createPrimitiveToken(Terminals.pPRECENT);
          }
        case 180: break;
        case 73: 
          { return createPrimitiveToken(Terminals.kCONST);
          }
        case 181: break;
        case 29: 
          { 
          }
        case 182: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	/* Beware : The lexer has always to be in the initial state
	   when the end of the input stream is reached, as all non
	   initial states suggest, that some special (complicated)
	   token is scanned/constructed at the moment and it's
	   construction isn't finished yet.*/
	if (yystate() != YYINITIAL)
		throw new CUnknownTokenException(yyline,
			yycolumn,
			null,
			"Lexer error: Lexer is not in initial state (current lexer state : "+
			yystate() +
			"), but input stream doesn't contain further signs (EOF reached).");
	
	return createPrimitiveToken(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
