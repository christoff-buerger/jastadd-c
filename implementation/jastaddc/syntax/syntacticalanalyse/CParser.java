/**
 * Beaver generated parser for the JastAdd C99 front end.
 * The parser constructs an intermediate JastAdd abstract syntax tree, which
 * is rewritten into the final abstract syntax tree using JastAdd specifications.
 * 
 * The grammar used, is the one of the C99 standard, which is based on
 * a grammar by Jeff Lee (further developed since it's first release in 1985
 * by the standard committee.). The grammar specification this one is based on
 * can be found at http://www.quut.com/c/ANSI-C-grammar-y.html.
 * 
 * @author C. Bürger
 */

package jastaddc.syntax.syntacticalanalyse;

import java.util.ArrayList;
import jastaddc.SourceError;
import jastaddc.semantics.ast.*;
import beaver.*;
import jastaddc.Compiler;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "CParser.beaver".
 */
public class CParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short pBRACKETOPENROUND = 1;
		static public final short IDENTIFIER = 2;
		static public final short pSTAR = 3;
		static public final short pPLUS = 4;
		static public final short pMINUS = 5;
		static public final short pAND = 6;
		static public final short pPLUS_PLUS = 7;
		static public final short pMINUS_MINUS = 8;
		static public final short kSIZEOF = 9;
		static public final short CONSTANT = 10;
		static public final short STRING_LITERAL = 11;
		static public final short pTILDE = 12;
		static public final short pEXCLAMATIONMARK = 13;
		static public final short kCONST = 14;
		static public final short kRESTRICT = 15;
		static public final short kVOLATILE = 16;
		static public final short pBRACKETOPENCURLY = 17;
		static public final short pBRACKETCLOSEROUND = 18;
		static public final short pSEMICOLON = 19;
		static public final short pBRACKETCLOSESQUARE = 20;
		static public final short kENUM = 21;
		static public final short kVOID = 22;
		static public final short kCHAR = 23;
		static public final short kSHORT = 24;
		static public final short kINT = 25;
		static public final short kLONG = 26;
		static public final short kFLOAT = 27;
		static public final short kDOUBLE = 28;
		static public final short kSIGNED = 29;
		static public final short kUNSIGNED = 30;
		static public final short k_BOOL = 31;
		static public final short k_COMPLEX = 32;
		static public final short k_IMAGINARY = 33;
		static public final short TYPEDEF_NAME = 34;
		static public final short kSTRUCT = 35;
		static public final short kUNION = 36;
		static public final short kSTATIC = 37;
		static public final short pCOMMA = 38;
		static public final short pBRACKETOPENSQUARE = 39;
		static public final short kTYPEDEF = 40;
		static public final short kEXTERN = 41;
		static public final short kAUTO = 42;
		static public final short kREGISTER = 43;
		static public final short kINLINE = 44;
		static public final short kWHILE = 45;
		static public final short kDO = 46;
		static public final short kIF = 47;
		static public final short kSWITCH = 48;
		static public final short kFOR = 49;
		static public final short kGOTO = 50;
		static public final short kCASE = 51;
		static public final short kDEFAULT = 52;
		static public final short kCONTINUE = 53;
		static public final short kBREAK = 54;
		static public final short kRETURN = 55;
		static public final short pBRACKETCLOSECURLY = 56;
		static public final short pCOLON = 57;
		static public final short pPOINT = 58;
		static public final short pEQUALS = 59;
		static public final short pLESSER_LESSER = 60;
		static public final short pGREATER_GREATER = 61;
		static public final short pSLASH = 62;
		static public final short pPRECENT = 63;
		static public final short pLESSER = 64;
		static public final short pGREATER = 65;
		static public final short pLESSER_EQUALS = 66;
		static public final short pGREATER_EQUALS = 67;
		static public final short pEQUALS_EQUALS = 68;
		static public final short pEXCLAMATIONMARK_EQUALS = 69;
		static public final short pARROWUP = 70;
		static public final short pLINEVERTICAL = 71;
		static public final short pAND_AND = 72;
		static public final short kELSE = 73;
		static public final short pMINUS_GREATER = 74;
		static public final short pQUESTIONMARK = 75;
		static public final short pPOINT_POINT_POINT = 76;
		static public final short pLINEVERTICAL_LINEVERTICAL = 77;
		static public final short pSTAR_EQUALS = 78;
		static public final short pSLASH_EQUALS = 79;
		static public final short pPRECENT_EQUALS = 80;
		static public final short pPLUS_EQUALS = 81;
		static public final short pMINUS_EQUALS = 82;
		static public final short pLESSER_LESSER_EQUALS = 83;
		static public final short pGREATER_GREATER_EQUALS = 84;
		static public final short pAND_EQUALS = 85;
		static public final short pARROWUP_EQUALS = 86;
		static public final short pLINEVERTICAL_EQUALS = 87;

		static public final String[] NAMES = {
			"EOF",
			"pBRACKETOPENROUND",
			"IDENTIFIER",
			"pSTAR",
			"pPLUS",
			"pMINUS",
			"pAND",
			"pPLUS_PLUS",
			"pMINUS_MINUS",
			"kSIZEOF",
			"CONSTANT",
			"STRING_LITERAL",
			"pTILDE",
			"pEXCLAMATIONMARK",
			"kCONST",
			"kRESTRICT",
			"kVOLATILE",
			"pBRACKETOPENCURLY",
			"pBRACKETCLOSEROUND",
			"pSEMICOLON",
			"pBRACKETCLOSESQUARE",
			"kENUM",
			"kVOID",
			"kCHAR",
			"kSHORT",
			"kINT",
			"kLONG",
			"kFLOAT",
			"kDOUBLE",
			"kSIGNED",
			"kUNSIGNED",
			"k_BOOL",
			"k_COMPLEX",
			"k_IMAGINARY",
			"TYPEDEF_NAME",
			"kSTRUCT",
			"kUNION",
			"kSTATIC",
			"pCOMMA",
			"pBRACKETOPENSQUARE",
			"kTYPEDEF",
			"kEXTERN",
			"kAUTO",
			"kREGISTER",
			"kINLINE",
			"kWHILE",
			"kDO",
			"kIF",
			"kSWITCH",
			"kFOR",
			"kGOTO",
			"kCASE",
			"kDEFAULT",
			"kCONTINUE",
			"kBREAK",
			"kRETURN",
			"pBRACKETCLOSECURLY",
			"pCOLON",
			"pPOINT",
			"pEQUALS",
			"pLESSER_LESSER",
			"pGREATER_GREATER",
			"pSLASH",
			"pPRECENT",
			"pLESSER",
			"pGREATER",
			"pLESSER_EQUALS",
			"pGREATER_EQUALS",
			"pEQUALS_EQUALS",
			"pEXCLAMATIONMARK_EQUALS",
			"pARROWUP",
			"pLINEVERTICAL",
			"pAND_AND",
			"kELSE",
			"pMINUS_GREATER",
			"pQUESTIONMARK",
			"pPOINT_POINT_POINT",
			"pLINEVERTICAL_LINEVERTICAL",
			"pSTAR_EQUALS",
			"pSLASH_EQUALS",
			"pPRECENT_EQUALS",
			"pPLUS_EQUALS",
			"pMINUS_EQUALS",
			"pLESSER_LESSER_EQUALS",
			"pGREATER_GREATER_EQUALS",
			"pAND_EQUALS",
			"pARROWUP_EQUALS",
			"pLINEVERTICAL_EQUALS"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjMmUO5TNrF$UztRUTPGjL4H3OfOCqbnMKtek0IEz5EYmTbcNfPM5XwKr4HL6C6atKY2M" +
		"QH2MQ63LDKunOeqcCHWCQ5S$$DtVEUpDlzxsPUUn#yVl#OVZEd5j#zvpVRMVkx1k8gjUcTc" +
		"ecJQSPD9EcKHUwddhG79fBjz0isa4xgLIDKhtK8gf7JA$IQ$Hh#Wtzbdv7lwVNwGtw0$sH$" +
		"aH$KTLL1hsiQjA$w1VqI$eLlK9lgMArIIrHgzKEjKVDLlFLVdLG7LQZtVrHcbgaFFYZN1hj" +
		"wcyijQFPJlxeKpgF$dtkmLyB6c$vepfqBNMZgRI05j8YMaRBQHJTJ2Ff9Xf1Lr9jkexEgW9" +
		"wdixHd#bDDLLDL5FeP$IYcg0cgsbgkff1TqkFnzDHMaT97aRu52NR6DHLOwg0HJCQImMq12" +
		"pgkuxLPvZX2sgSArCtErs5TMNjtE3DZbwP5#YQ2cEL8tOQgZfqXB8yh85Ch4nhpRMbHX7iD" +
		"gNrOlSWxBQYYHxi$j1kDyPPBLKJAT#OLVf9EIxDrGczQaqs7UbP6afDFB1PGODjR89nm1n5" +
		"zzOTc6sjmncD4slrg2$ufCMwowKdFJskdvV1jq$5deWLzzR6t5cjJpZ4hWzr71b5gOWbqL4" +
		"VKGeD0MeOKDQuj8uSkygDtE8egEZUpDqwYZewSXAKwXF6QP8dJajZvbIV$acDu6sn5qwQUT" +
		"1ZMtNC0wUMQ1ChfuRWD03UtdRYfBAeFpK1QgMDKtSUuO7J15eNCoTZvMt5EBLr72ViRHuEJ" +
		"iy0TP5Aw6k9296VXVNecn2lARGxPav69DaBRsVSED41eDxHdDeuSw9Jz2qTDlOEJr0ZQ5CK" +
		"bBbl9z6Nb4YtUTYtasbUJD7q8hKFyepmb33GLrDHb1h3pbLqg#fU1NuQy$W8ViP8l3BllJt" +
		"q$pFxIKpQoNFUG#lJz40bMb#WxrTe$R3dYFiedRdacViHdQKdWqz5UfhkmEeodef53kU8s#" +
		"d7gbsifoXwJavHiqAdg5Wjl20MvbsoXP#BXOMNRE4biR0Y1Wj7OE4VEBd#MmLmceo7XJOgG" +
		"QtoRa6bg0AqZLUrQJqiNA4jNAtMnc2X2JXWXwjSrHmMMgafgerghpR6q8k#Og6BkXuMUi32" +
		"KdMBsXm3XxdenGArKXMgTR2m1HQsgX9L5eE5dR2mL#rJ1zGXp0LX772fssBe1Q4NSjait5b" +
		"f2tTxjf3k0H6CPlDfjVbSfrLKAAcxw3mDeZkfc39KiheI2A84Q0E159tKr0RHMaNKhqhOu4" +
		"a3Yt#dWrH39Qaaf5THpI17rPC6AQLIKVeVI0tw2lSlDCACNt$LRCWrZaLxKZGGE#RrdgiTj" +
		"$xiGZz8rN35xG5keolg8Rol#6aVtce8SsExL40huQvyV1FTuyezUCutBqzeVOQEm#nuG$zD" +
		"c5Lo55KEHiSDqmnZamv$zJtix1RchbBNGdPvmEVPTk7jLRBAhQkQwpjqBIznWZfxy6fuEkJ" +
		"WoRmswFiQ1rvbhfpDQxChRfihwosqoHMp7nZ3qsFEZDHoUbpZ7dJ0$G30ZdIVA$FlkRAwrm" +
		"FpHqpcghKByo9rbHiZrTHWhXguuXgvxgM6xinLIm#OV4zFkDwUKCl2uXtMgEhaeLr7jSQJz" +
		"VMUKEwhrK3TwWbrr1FgfCDiajgEeQZkQkSAZ48rFMn38L7jgJJKPiFU2bUBdU3xkBON$OtB" +
		"G0wdWTXBxlQsswRsHbVq$QvUtUhDDNINpUl73kFS4VMVkDfqsmkDgTob4btRT7Rrwh0wz4c" +
		"gEgMMypgdN7uIRecoEfoiaLvhPp6RmVStmliRwVStwxfBdzu#DzSQpeb4Fmrvgal7LQroWx" +
		"32DSuwZe3gwu5pPH5dWR3rMNMm#gnkKDrmDhQFPwG#HxUV9xYEZllSUBuxz5Hr3VbRvDfRK" +
		"hlTCK0TyOHoztTMtM4RlK255HEyuhtu4w#dAIwimCS93gt$dzMeQsAlSV3Jwxlkp#MQ$wcQ" +
		"izYlaPuWjdBLBonEXA8fFK774IU2KQ2$6g06ga5gi1gYXgeRrJ1bFDcViiK5F#A41t#mDL7" +
		"T4y7VCKJlUoiWHshaHPH#7R9hyBaPjulgfb3fHVeW7A5HcIYrBZFzBagjwtrzlwYoAxOkTt" +
		"qGeUnzKkJJFO$7A2RWsPv4oPI2Sq0QtZNJyIpBmAaiYmPJ3Qg9TylQE8NKnHdnIgf7Lr5zQ" +
		"a0DwMfgH8sfYRRKb9fHSsf1BQaLjQOsr1PFv7RKdZhWNDG9p#Oy3$wkWxzS3$vwKUygyBUA" +
		"LiFV6W$#kb1Ncx$HD8R6qZWQJnDe8asYoJG5vuvfiewDjJjRh#9vD5zE8mMqc9RGKdqgMK4" +
		"huTTaK4IPj0uSt1difHmRWuDqj0fOTAFks6yzmQAVwrYPzNjTcRhP2RB#xzg9D5QcdRwO0O" +
		"MnTP#1FAnCQmOKzObeDrVipePTWxsxtRLXTcEVrMmzgxuABOlqgZNPv81DBaRIdKq#zg359" +
		"hWlpL5qRsr4f#XzCQtbmbuElCIwosERzoRWcncX9wPsRstCdTLwaCDwpD9n90Dn9Ci1bODt" +
		"b8r0PGDb7vV8iQlyo4L6HVTcrXZZxCGfYEhyN#7K3txwm5kM9quvOPooF77AYPbJNt3AWJU" +
		"V8wSCxFs0e2oFcPuuhOkPar6MhVUS4oTZRsSAfzd01oD2P6#vL6ZZbHqp9yERDqu6AaDpyd" +
		"lWbAttJYRspkmeA7E$xWHkbwSeVJtTSCdHD1gwqD5E9kse4Z#P4VsO$JVlEs8#YPdjWizvz" +
		"zRP#7VfhVqHMcTxZhZPu7wfCvUjdxV1N2QUYhdwgLZei5etw6y6At#A#b#ne62XizwjFbZO" +
		"0Wj#FCLZiP012pwqDCuY2t4lq2ic5WlPi63iS6ETBeGKG39Zvc1OyEbU61mKUXMBXSvw7Fg" +
		"ZdOA5Ljf2LimZwTFFmInQo4m5Z2iM2q3FORc#Amin8Ofb7swaJP8oudu9ulugAaL#7HN3Un" +
		"Oq43grNVCfeUsOiT8gOGEFi6WyQOgn1hSWRR2nsfNG7jg3qbMGOYh3VQr6cF7hiC46uXR7e" +
		"lFGTcJ4yofX9xIZjHqlEt#j9rGES0es$MoxoAVlmXt#Ce5ouoxdVB7W3MsiXpmFx#8ckina" +
		"LXMZw0cJfrU3EtAjkQieqzXL7l0vzbrO5QlSDdF53iy#SnIBlSK9Jn7DqPCmodRbrSIh9TU" +
		"#DQcokVV02Bl20oFWSYupho9C5QrS#tCmj7CFUTkvLSdXEq15dKqPXGnFev2ZHmsntc5rvE" +
		"adHmRbUs9c#CvrHUR1joTxePbTNmMhogNUMaCshmv$4$B4AeO#Lc5FdLQ7$BshlDTo#PsGN" +
		"URgSBAc4HdOy$d1znFa5q7mVcAp9gStMMlh81j2TLjfctbUjE7pFVy5#H96G3XN4e4#PzZx" +
		"37IepngzAgn74VhiqCVWwIlJSIRpdLdIW90$Xx$xX32ElcAnv0LbV#EFj692begy#1FiFje" +
		"VbZz6jxh#hV9opUMQopNVVOtnFXmX7jZBwJfxd2WNJOj2kI4qb6waOJISHj1DD99kfb4eFH" +
		"8U9xpuqr6z89g$oCZmKZE2wMXt8DIBsLGOZj2epLHeo#aqxQRDTeJ4pTqLMvUBWuKHoZOJg" +
		"VlMwKy7udeH#PeRwQ0G9NGqDJriQbL3yjM8KdTPkDGqurj2CvtyhQtyX9LElvueli18m$4B" +
		"H4d6TsrF4wNymFp6BMq9z1ZelT2VGPz0VHte#w6VXJu3RTIZhK9Psc$0kINqESk7YaSVQfd" +
		"fj8#5mrcalqBTAnQkMeBeRD4DHRSMEyrWPoAa1Tft8F9FCCjJSgJ#LPijSFUTilA#Ju3FX$" +
		"uSkWmw5PX#uFe8z4YqDVHKb9T0BoGAr8DUOnztDm5#kvKEO5pzw6ErWz1tGf#4$WFa7$29C" +
		"V8V36#R#f2f4nDHLmhv5JXjn7mqDikJ#bjO$ndnzn3IhrNauVzGRA7FSNvfFm7fcXOchfMf" +
		"IVp6xH7T3cFG7$fH6RTigmqrHdbjsC9QI3g5z7bRtx5cuYwOwNXPZ$5NYKsCGz8JoBUNyc5" +
		"ME$KUyYEbVApm3wqT6z$dHByhM9$eXkMnLINWWV6FkmBZc80zjzagzp6aJ33zXSSvZC5BCX" +
		"Ql2zUF18yv3oG9hY$oyw2RXFjAbB5AbBsTq0DjwaA$BUNLBMpy1$3ndfKFv4BoiCU$4Uo4Y" +
		"dr970HRfysqyJzd0irjxMKj16fYdZunqycoRWAozwhz2#dUKYPzJgw5z00pdRe0wK5IFqJy" +
		"78SCHduOP3OmvuJBCR5fYqc1DQABmda7i1TJFpFJwIaOkrz0roxVFpT1EpzaLZ1lH5cpdAw" +
		"jY4t8TxOL60XR1uHJ4#IDk76lr4r7#YqBwsygvHk0nTvAseTwnD40Oew$cTJTXheRKFSfoh" +
		"f86U9iEkOiUINAbeYjBIXV1a4iIKVCJVuQwRs2Vn8tZ5KQ#fc6UVG$BULFGUwNz0EY7pHrc" +
		"d3pzp1rIcUaNvKw8$OFmHgMc9no5EcwqSSazG8u9OUN#LyCp$jQMEd4HRRnVCoMlcZ3hBVI" +
		"X7sJ$BYLZ#jgweJXacyhUhgfLJtHibRLRk4a#z0dED#NDfjrh7JospOUfyFxGU#8pO3ObF7" +
		"pIKoA6sphprahdL1DS1rjVYxORKSIs2iGVs#8ln5YH#RHVyAfVKLxWJSgblcMYNx6kMtYKs" +
		"BZHV7TJlgstDH9jIgsIKbojfbGOgMJcaN6f7UgM1PdMok1vwqqzHIxY3z9IyjnQH2TX#eD$" +
		"9R8TLQiSkvBV7FH0qNF4rtgfNrb16E4E9I#nCe7RF4ruMNR65mZkhjmkztKb11kBo4Jy$jc" +
		"U9c$KBHjl0DVsFf$E1oVCZSy7x3jj$X78$HXFaHYMigRvUijN68TKoUz5bwUKXW1QuixIUz" +
		"Mh4yT5Jox2EPyU7tAWMWymd49ClV94XTISxsqAzT$FFVJHrbvwYLwQqLioabtUy7rc79AyW" +
		"DjTVCYjqcMiJNNBFI3jZevdyJRpkt9$QJiKrC7CcnruohQLuin9zrGPvmPshdt8NbznRA0n" +
		"C34qQZVZ$nIMrt4#JBUgRGYhiPfZFC$uns77uRSmpZDyjsShsln5EGyxeXx1$uflmFz4tuE" +
		"z#SXECdoYn2SGlXboAkGtq7UWFm9yfQ1XyQJcH$XV#hqV$XHt3#6u1p8VuVyJPT$fEyu2p3" +
		"ELjoUhz7vjln3Ve5$pY$nBndl0FmAvBUGro5$XFo5l#8F#Q$y0R$Fx$6x$2rVv6zG$YQVup" +
		"yptZ0ORnVyQ$uzlmRTXjlnjT2TfEStGWP09ZBE#DnNbtNdvRoCboBLJ#TxwdiFdWGlE9Lm5" +
		"yXrqduiZ#8nF9g7ys8fMS3pjPu3DCvuF4$Avo8$Ys$HwPcG6P2HF9rlvd7y47#V7#G7#7x#" +
		"7j$7f$akFibtyXryEv$Ws$Wutyh7#2WVuSDyY0$o0TxF#tWlxs6yY$8kRR6CIxJU3jd8E5i" +
		"PnpbU3rcaonTo0K$ZgJoPf$0ctihRU3Dl4MR5a29UnJXPyGfUpOMwT2ra3PVoJjwXyxlrVI" +
		"ZZFOwxCawmZDCGupJB0tLDByWWdUgZxxtHtsuKklXBo1UGJnYdEiRfYC$pl$bpNVUsO7x6p" +
		"$8p$6D#cf$Y9$a9FiEFyu$uCRqQKnXlWepJ9JVcgxaXDq3gNcxDhRWbj#3ct8o$HKbJiPIh" +
		"xpbS7$UhGXpm3ijNXd9NX59roNPn7LkwjhvdGx8WYF#S0QckI#N$2N9DVQ$1ZJYPazZuV$D" +
		"Vwh$TZWiJFus17aDn4BzD6#8J2K0Iw11mX$GNtWhYAoTnD1RbaMIybZYQ03q1xOCo4Vc9Ml" +
		"jf4jAJjFRJPAGdQst959HDqTfFKv6U2ZqDUXhqTEZfq3EWPq3FX9u9RVnUSGl5wz$YPo5$4" +
		"DghpD7YrxzL5Q5$HKWRlqOiGZgQtWMz2xYTq3kX5#jVBy9bRYLaFleo7#Cu7xxc8M$8RYq#" +
		"sWn$XT36rtr1VLYBdygWor1MXlG2j5y0EwO483xQW$ezgDi2lGNQ#9KyA4iWQu1P0xrQYny" +
		"I3uaJ2OW4o$osEkER9WNnYVYDxsaWFjeAlHNvRT3Re3UWp1H5HxJuQGVq3fGPl#cOOdmLvO" +
		"S4jI5nDcr8l4q79I0In8MtDxw#A4Qw6EbIf8slhqgHBqL#4z8bA2k1tgY$rlBHKkGZoJBKB" +
		"qCRGnS0PtpBTnJbHv7U2st8GYq#MWvUox6d3Br2Im8a4APNelrAO2tnqp6qFuRqFcX3ziFV" +
		"VfGVGFe0oe$$7#qKs9u=");

	private Compilation compilation;
	
	class Events extends Parser.Events {
		public void scannerError(Scanner.Exception exc) {
			jastaddc.SourceError error =
				new jastaddc.SourceError(exc.getMessage());
			error.line = exc.line;
			error.column = exc.column;
			error.sourceName = compilation.sourceName();
			error.errorType = jastaddc.SourceError.ErrorType.LEXICAL;
			error.errorLevel = jastaddc.SourceError.ErrorLevel.ERROR;
			compilation.addError(error);
		}
		
		public void syntaxError(Symbol token) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Unexpected token [");
			errorM.append(token.value != null ? token.value.toString() : "§No Token Value§");
			errorM.append(';');
			errorM.append(Terminals.NAMES[token.getId()]);
			errorM.append("].");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = token.getLine(token.getStart());
			error.column = token.getColumn(token.getStart());
			error.sourceName = compilation.sourceName();
			error.errorType = jastaddc.SourceError.ErrorType.SYNTACTICAL;
			error.errorLevel = jastaddc.SourceError.ErrorLevel.ERROR;
			compilation.addError(error);
		}
		
		public void unexpectedTokenRemoved(Symbol token) {}
		public void missingTokenInserted(Symbol token) {}
		public void misspelledTokenReplaced(Symbol token) {}
		public void errorPhraseRemoved(Symbol error) {}
	}
	
	{
		report = new Events();
	}

	public TranslationUnit parse(Scanner lexer, String sourceName) throws Compiler.ConfigurationException {
		TranslationUnit tunit = new TranslationUnit();
		compilation = new Compilation(
			tunit,
			new DefaultErrorBuilder(new Opt()));
		compilation.sourceName = sourceName;
		List decls = null;
		
		try {
			decls = (List)parse(lexer);
		} catch(Parser.Exception exc) {
			if (decls == null)
				decls = new List();
			StringBuilder errorM = new StringBuilder();
			errorM.append("Unresolved parsing errors: ");
			errorM.append(exc.getMessage());
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = null;
			error.column = null;
			error.sourceName = sourceName;
			error.errorType = jastaddc.SourceError.ErrorType.SYNTACTICAL;
			error.errorLevel = jastaddc.SourceError.ErrorLevel.ERROR;
			compilation.addError(error);
		} catch (java.io.IOException exc) {
			throw new Compiler.ConfigurationException(exc);
		}
		
		tunit.setDeclarationList(decls);
		return tunit;
	}

	private final Action[] actions;

	public CParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] S = translation_unit.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					
			return _symbol_list;
				}
			},
			new Action() {	// [1] primary_expression = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			Variable var = new Variable(id);
			var.line = id.line;
			var.column = id.column;
			return new Symbol(var);
				}
			},
			new Action() {	// [2] primary_expression = CONSTANT.con
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_con = _symbols[offset + 1];
					final Constant con = (Constant) _symbol_con.value;
					
			con.line = Symbol.getLine(_symbol_con.getStart());
			con.column = Symbol.getColumn(_symbol_con.getStart());
			return _symbol_con;
				}
			},
			new Action() {	// [3] primary_expression = STRING_LITERAL.lit
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_lit = _symbols[offset + 1];
					final StringLiteral lit = (StringLiteral) _symbol_lit.value;
					
			lit.line = Symbol.getLine(_symbol_lit.getStart());
			lit.column = Symbol.getColumn(_symbol_lit.getStart());
			return _symbol_lit;
				}
			},
			new Action() {	// [4] primary_expression = pBRACKETOPENROUND expression.expr pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [5] postfix_expression = primary_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [6] postfix_expression = postfix_expression.designation pBRACKETOPENSQUARE.brOp expression.index pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_designation = _symbols[offset + 1];
					final Expression designation = (Expression) _symbol_designation.value;
					final Symbol brOp = _symbols[offset + 2];
					final Symbol _symbol_index = _symbols[offset + 3];
					final Expression index = (Expression) _symbol_index.value;
					
			ArrayAccess arrayAcc = new ArrayAccess(new Opt(designation), index);
			arrayAcc.line  = Symbol.getLine(brOp.getStart());
			arrayAcc.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(arrayAcc);
				}
			},
			new Action() {	// [7] postfix_expression = postfix_expression.expr pBRACKETOPENROUND.brOp pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol brOp = _symbols[offset + 2];
					
			List paras = new List();
			FunctionCall funcCall = new FunctionCall(expr, paras);
			funcCall.line = Symbol.getLine(brOp.getStart());
			funcCall.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(funcCall);
				}
			},
			new Action() {	// [8] postfix_expression = postfix_expression.expr pBRACKETOPENROUND.brOp argument_expression_list.paras pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol brOp = _symbols[offset + 2];
					final Symbol _symbol_paras = _symbols[offset + 3];
					final List paras = (List) _symbol_paras.value;
					
			FunctionCall funcCall = new FunctionCall(expr, paras);
			funcCall.line = Symbol.getLine(brOp.getStart());
			funcCall.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(funcCall);
				}
			},
			new Action() {	// [9] postfix_expression = postfix_expression.expr pPOINT.point IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol point = _symbols[offset + 2];
					final Symbol _symbol_id = _symbols[offset + 3];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			MemberAccess memberAcc = new MemberAccess(new Opt(expr), id);
			memberAcc.line = Symbol.getLine(point.getStart());
			memberAcc.column = Symbol.getColumn(point.getStart());
			return new Symbol(memberAcc);
				}
			},
			new Action() {	// [10] postfix_expression = postfix_expression.expr pMINUS_GREATER.mg IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol mg = _symbols[offset + 2];
					final Symbol _symbol_id = _symbols[offset + 3];
					final Identifier id = (Identifier) _symbol_id.value;
					
			Indirection indirect = new Indirection(expr);
			indirect.line = expr.line;
			indirect.column = expr.column;
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			MemberAccess memberAcc = new MemberAccess(new Opt(indirect), id);
			memberAcc.line = Symbol.getLine(mg.getStart());
			memberAcc.column = Symbol.getColumn(mg.getStart());
			return new Symbol(memberAcc);
				}
			},
			new Action() {	// [11] postfix_expression = postfix_expression.expr pPLUS_PLUS.pp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol pp = _symbols[offset + 2];
					
			IncrementAfter incAfter = new IncrementAfter(expr);
			incAfter.line = Symbol.getLine(pp.getStart());
			incAfter.column = Symbol.getColumn(pp.getStart());
			return new Symbol(incAfter);
				}
			},
			new Action() {	// [12] postfix_expression = postfix_expression.expr pMINUS_MINUS.mm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol mm = _symbols[offset + 2];
					
			DecrementAfter decAfter = new DecrementAfter(expr);
			decAfter.line = Symbol.getLine(mm.getStart());
			decAfter.column = Symbol.getColumn(mm.getStart());
			return new Symbol(decAfter);
				}
			},
			new Action() {	// [13] postfix_expression = pBRACKETOPENROUND type_name.type pBRACKETCLOSEROUND pBRACKETOPENCURLY.brOp initializer_list.initList pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_type = _symbols[offset + 2];
					final _type_name type = (_type_name) _symbol_type.value;
					final Symbol brOp = _symbols[offset + 4];
					final Symbol _symbol_initList = _symbols[offset + 5];
					final List initList = (List) _symbol_initList.value;
					
			CompoundInitializer init = new CompoundInitializer(initList);
			init.line = Symbol.getLine(brOp.getStart());
			init.column = Symbol.getColumn(brOp.getStart());
			CompoundLiteral cLit = new CompoundLiteral(type, init);
			cLit.line = type.line;
			cLit.column = type.column;
			return new Symbol(cLit);
				}
			},
			new Action() {	// [14] postfix_expression = pBRACKETOPENROUND type_name.type pBRACKETCLOSEROUND pBRACKETOPENCURLY.brOp initializer_list.initList pCOMMA pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_type = _symbols[offset + 2];
					final _type_name type = (_type_name) _symbol_type.value;
					final Symbol brOp = _symbols[offset + 4];
					final Symbol _symbol_initList = _symbols[offset + 5];
					final List initList = (List) _symbol_initList.value;
					
			CompoundInitializer init = new CompoundInitializer(initList);
			init.line = Symbol.getLine(brOp.getStart());
			init.column = Symbol.getColumn(brOp.getStart());
			CompoundLiteral cLit = new CompoundLiteral(type, init);
			cLit.line = type.line;
			cLit.column = type.column;
			return new Symbol(cLit);
				}
			},
			new Action() {	// [15] argument_expression_list = assignment_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			List list = new List();
			list.add(expr);
			list.line = expr.line;
			list.column = expr.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [16] argument_expression_list = argument_expression_list.list pCOMMA assignment_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
			list.add(expr);
			return _symbol_list;
				}
			},
			new Action() {	// [17] unary_expression = postfix_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [18] unary_expression = pPLUS_PLUS.pp unary_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol pp = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
			IncrementBefore incBefore = new IncrementBefore(expr);
			incBefore.line = Symbol.getLine(pp.getStart());
			incBefore.column = Symbol.getColumn(pp.getStart());
			return new Symbol(incBefore);
				}
			},
			new Action() {	// [19] unary_expression = pMINUS_MINUS.mm unary_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol mm = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
			DecrementBefore decBefore = new DecrementBefore(expr);
			decBefore.line = Symbol.getLine(mm.getStart());
			decBefore.column = Symbol.getColumn(mm.getStart());
			return new Symbol(decBefore);
				}
			},
			new Action() {	// [20] unary_expression = unary_operator.op cast_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_op = _symbols[offset + 1];
					final UnaryExpression op = (UnaryExpression) _symbol_op.value;
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
			op.setOperand(expr);
			return _symbol_op;
				}
			},
			new Action() {	// [21] unary_expression = kSIZEOF.sizeof unary_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol sizeof = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
			SizeOfExpression sizeExpr = new SizeOfObject(expr);
			sizeExpr.line = Symbol.getLine(sizeof.getStart());
			sizeExpr.column = Symbol.getColumn(sizeof.getStart());
			return new Symbol(sizeExpr);
				}
			},
			new Action() {	// [22] unary_expression = kSIZEOF.sizeof pBRACKETOPENROUND type_name.type pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol sizeof = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 3];
					final _type_name type = (_type_name) _symbol_type.value;
					
			SizeOfExpression sizeExpr = new SizeOfType(type);
			sizeExpr.line = Symbol.getLine(sizeof.getStart());
			sizeExpr.column = Symbol.getColumn(sizeof.getStart());
			return new Symbol(sizeExpr);
				}
			},
			new Action() {	// [23] unary_operator = pAND.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			UnaryExpression result = new AdressOf();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [24] unary_operator = pSTAR.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			UnaryExpression result = new Indirection();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [25] unary_operator = pPLUS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			UnaryExpression result = new PlusSign();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [26] unary_operator = pMINUS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			UnaryExpression result = new MinusSign();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [27] unary_operator = pTILDE.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			UnaryExpression result = new OneComplement();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [28] unary_operator = pEXCLAMATIONMARK.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			UnaryExpression result = new Negation();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [29] cast_expression = unary_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [30] cast_expression = pBRACKETOPENROUND.brOp type_name.type pBRACKETCLOSEROUND cast_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 2];
					final _type_name type = (_type_name) _symbol_type.value;
					final Symbol _symbol_expr = _symbols[offset + 4];
					final Expression expr = (Expression) _symbol_expr.value;
					
			Cast cast = new Cast(type, expr);
			cast.line = Symbol.getLine(brOp.getStart());
			cast.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(cast);
				}
			},
			new Action() {	// [31] multiplicative_expression = cast_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [32] multiplicative_expression = multiplicative_expression.expr1 pSTAR.token cast_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new Multiplication(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [33] multiplicative_expression = multiplicative_expression.expr1 pSLASH.token cast_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new Division(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [34] multiplicative_expression = multiplicative_expression.expr1 pPRECENT.token cast_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new Modulo(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [35] additive_expression = multiplicative_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [36] additive_expression = additive_expression.expr1 pPLUS.token multiplicative_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new Addition(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [37] additive_expression = additive_expression.expr1 pMINUS.token multiplicative_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new Subtraction(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [38] shift_expression = additive_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [39] shift_expression = shift_expression.expr1 pLESSER_LESSER.token additive_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new LeftShift(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [40] shift_expression = shift_expression.expr1 pGREATER_GREATER.token additive_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new RightShift(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [41] relational_expression = shift_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [42] relational_expression = relational_expression.expr1 pLESSER.token shift_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new Lesser(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [43] relational_expression = relational_expression.expr1 pGREATER.token shift_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new Greater(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [44] relational_expression = relational_expression.expr1 pLESSER_EQUALS.token shift_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new LesserOrEqual(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [45] relational_expression = relational_expression.expr1 pGREATER_EQUALS.token shift_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new GreaterOrEqual(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [46] equality_expression = relational_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [47] equality_expression = equality_expression.expr1 pEQUALS_EQUALS.token relational_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new Equal(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [48] equality_expression = equality_expression.expr1 pEXCLAMATIONMARK_EQUALS.token relational_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new NotEqual(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [49] and_expression = equality_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [50] and_expression = and_expression.expr1 pAND.token equality_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new And(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [51] exclusive_or_expression = and_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [52] exclusive_or_expression = exclusive_or_expression.expr1 pARROWUP.token and_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new ExclusiveOr(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [53] inclusive_or_expression = exclusive_or_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [54] inclusive_or_expression = inclusive_or_expression.expr1 pLINEVERTICAL.token exclusive_or_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new InclusiveOr(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [55] logical_and_expression = inclusive_or_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [56] logical_and_expression = logical_and_expression.expr1 pAND_AND.token inclusive_or_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new LogicalAnd(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [57] logical_or_expression = logical_and_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [58] logical_or_expression = logical_or_expression.expr1 pLINEVERTICAL_LINEVERTICAL.token logical_and_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			Expression result = new LogicalOr(expr1, expr2);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [59] conditional_expression = logical_or_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [60] conditional_expression = logical_or_expression.expr1 pQUESTIONMARK.token expression.expr2 pCOLON conditional_expression.expr3
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					final Symbol _symbol_expr3 = _symbols[offset + 5];
					final Expression expr3 = (Expression) _symbol_expr3.value;
					
			ConditionalExpression result = new ConditionalExpression(expr1, expr2, expr3);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [61] assignment_expression = conditional_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [62] assignment_expression = unary_expression.expr1 assignment_operator.ass assignment_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_ass = _symbols[offset + 2];
					final AssignmentExpression ass = (AssignmentExpression) _symbol_ass.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			ass.setlValue(expr1);
			ass.setrValue(expr2);
			return _symbol_ass;
				}
			},
			new Action() {	// [63] assignment_operator = pEQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new NormalAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [64] assignment_operator = pSTAR_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new MultiplyAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [65] assignment_operator = pSLASH_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new DivideAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [66] assignment_operator = pPRECENT_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new ModuloAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [67] assignment_operator = pPLUS_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new AdditionAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [68] assignment_operator = pMINUS_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new SubtractionAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [69] assignment_operator = pLESSER_LESSER_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new LeftShiftAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [70] assignment_operator = pGREATER_GREATER_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new RightShiftAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [71] assignment_operator = pAND_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new AndAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [72] assignment_operator = pARROWUP_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new ExclusiveOrAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [73] assignment_operator = pLINEVERTICAL_EQUALS.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			AssignmentExpression result = new InclusiveOrAssignment();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [74] expression = assignment_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [75] expression = expression.expr1 pCOMMA assignment_expression.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
			if (expr1 instanceof CommaExpression) {
				((CommaExpression)expr1).addExpression(expr2);
				return _symbol_expr1;
			}
			List list = new List();
			list.add(expr1);
			list.add(expr2);
			Expression result = new CommaExpression(list);
			result.line = expr1.line;
			result.column = expr1.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [76] constant_expression = conditional_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return _symbol_expr;
				}
			},
			new Action() {	// [77] declaration = declaration_specifiers.specifiers pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifiers = _symbols[offset + 1];
					final List specifiers = (List) _symbol_specifiers.value;
					
			_declaration result =
				new _declaration(specifiers, new List());
			result.line = specifiers.line;
			result.column = specifiers.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [78] declaration = declaration_specifiers.specifiers init_declarator_list.init pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifiers = _symbols[offset + 1];
					final List specifiers = (List) _symbol_specifiers.value;
					final Symbol _symbol_init = _symbols[offset + 2];
					final List init = (List) _symbol_init.value;
					
			_declaration result =
				new _declaration(specifiers, init);
			result.line = specifiers.line;
			result.column = specifiers.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [79] declaration_specifiers = storage_class_specifier.specifier
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final StorageClassSpecifier specifier = (StorageClassSpecifier) _symbol_specifier.value;
					
			List list = new List();
			list.add(specifier);
			list.line = specifier.line;
			list.column = specifier.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [80] declaration_specifiers = storage_class_specifier.specifier declaration_specifiers.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final StorageClassSpecifier specifier = (StorageClassSpecifier) _symbol_specifier.value;
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			list.add(specifier);
			return _symbol_list;
				}
			},
			new Action() {	// [81] declaration_specifiers = type_specifier.specifier
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final _type_specifier specifier = (_type_specifier) _symbol_specifier.value;
					
			List list = new List();
			list.add(specifier);
			list.line = specifier.line;
			list.column = specifier.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [82] declaration_specifiers = type_specifier.specifier declaration_specifiers.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final _type_specifier specifier = (_type_specifier) _symbol_specifier.value;
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			list.add(specifier);
			return _symbol_list;
				}
			},
			new Action() {	// [83] declaration_specifiers = type_qualifier.qualifier
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_qualifier = _symbols[offset + 1];
					final TypeQualifier qualifier = (TypeQualifier) _symbol_qualifier.value;
					
			List list = new List();
			list.add(qualifier);
			list.line = qualifier.line;
			list.column = qualifier.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [84] declaration_specifiers = type_qualifier.qualifier declaration_specifiers.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_qualifier = _symbols[offset + 1];
					final TypeQualifier qualifier = (TypeQualifier) _symbol_qualifier.value;
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			list.add(qualifier);
			return _symbol_list;
				}
			},
			new Action() {	// [85] declaration_specifiers = function_specifier.specifier
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final FunctionSpecifier specifier = (FunctionSpecifier) _symbol_specifier.value;
					
			List list = new List();
			list.add(specifier);
			list.line = specifier.line;
			list.column = specifier.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [86] declaration_specifiers = function_specifier.specifier declaration_specifiers.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final FunctionSpecifier specifier = (FunctionSpecifier) _symbol_specifier.value;
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			list.add(specifier);
			return _symbol_list;
				}
			},
			new Action() {	// [87] init_declarator_list = init_declarator.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _init_declarator decl = (_init_declarator) _symbol_decl.value;
					
			List list = new List();
			list.add(decl);
			list.line = decl.line;
			list.column = decl.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [88] init_declarator_list = init_declarator_list.list pCOMMA init_declarator.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 3];
					final _init_declarator decl = (_init_declarator) _symbol_decl.value;
					
			list.add(decl);
			return _symbol_list;
				}
			},
			new Action() {	// [89] init_declarator = declarator.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _declarator decl = (_declarator) _symbol_decl.value;
					
			_init_declarator result = new _init_declarator(decl, new Opt());
			result.line = decl.line;
			result.column = decl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [90] init_declarator = declarator.decl pEQUALS initializer.init
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _declarator decl = (_declarator) _symbol_decl.value;
					final Symbol _symbol_init = _symbols[offset + 3];
					final Initializer init = (Initializer) _symbol_init.value;
					
			_init_declarator result = new _init_declarator(decl, new Opt(init));
			result.line = decl.line;
			result.column = decl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [91] storage_class_specifier = kTYPEDEF.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			StorageClassSpecifier result = new Typedef();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [92] storage_class_specifier = kEXTERN.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			StorageClassSpecifier result = new Extern();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [93] storage_class_specifier = kSTATIC.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			StorageClassSpecifier result = new Static();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [94] storage_class_specifier = kAUTO.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			StorageClassSpecifier result = new Auto();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [95] storage_class_specifier = kREGISTER.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			StorageClassSpecifier result = new Register();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [96] type_specifier = kVOID.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("void");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [97] type_specifier = kCHAR.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("char");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [98] type_specifier = kSHORT.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("short");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [99] type_specifier = kINT.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("int");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [100] type_specifier = kLONG.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("long");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [101] type_specifier = kFLOAT.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("float");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [102] type_specifier = kDOUBLE.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("double");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [103] type_specifier = kSIGNED.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("signed");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [104] type_specifier = kUNSIGNED.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("unsigned");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [105] type_specifier = k_BOOL.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("_Bool");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [106] type_specifier = k_COMPLEX.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("_Complex");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [107] type_specifier = k_IMAGINARY.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_atomic_type result = new _atomic_type();
			result.setTypeName("_Imaginary");
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [108] type_specifier = struct_or_union_specifier.specifier
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final _struct_or_union_specifier specifier = (_struct_or_union_specifier) _symbol_specifier.value;
					
			return _symbol_specifier;
				}
			},
			new Action() {	// [109] type_specifier = enum_specifier.specifier
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final _enum_specifier specifier = (_enum_specifier) _symbol_specifier.value;
					
			return _symbol_specifier;
				}
			},
			new Action() {	// [110] type_specifier = TYPEDEF_NAME.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			_type_specifier result = new _typedef_name(id);
			result.line = id.line;
			result.column = id.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [111] struct_or_union_specifier = struct_or_union.su IDENTIFIER.id pBRACKETOPENCURLY struct_declaration_list.list pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_su = _symbols[offset + 1];
					final _struct_or_union su = (_struct_or_union) _symbol_su.value;
					final Symbol _symbol_id = _symbols[offset + 2];
					final Identifier id = (Identifier) _symbol_id.value;
					final Symbol _symbol_list = _symbols[offset + 4];
					final List list = (List) _symbol_list.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			_struct_or_union_specifier result = new _struct_or_union_specifier(su, new Opt(id), list);
			result.line = su.line;
			result.column = su.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [112] struct_or_union_specifier = struct_or_union.su pBRACKETOPENCURLY struct_declaration_list.list pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_su = _symbols[offset + 1];
					final _struct_or_union su = (_struct_or_union) _symbol_su.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					
			_struct_or_union_specifier result = new _struct_or_union_specifier(su, new Opt(), list);
			result.line = su.line;
			result.column = su.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [113] struct_or_union_specifier = struct_or_union.su IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_su = _symbols[offset + 1];
					final _struct_or_union su = (_struct_or_union) _symbol_su.value;
					final Symbol _symbol_id = _symbols[offset + 2];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			_struct_or_union_specifier result = new _struct_or_union_specifier(su, new Opt(id), new List());
			result.line = su.line;
			result.column = su.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [114] struct_or_union = kSTRUCT.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_struct_or_union result = new _struct();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [115] struct_or_union = kUNION.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_struct_or_union result = new _union();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [116] struct_declaration_list = struct_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _struct_declaration decl = (_struct_declaration) _symbol_decl.value;
					
			List list = new List();
			list.add(decl);
			list.line = decl.line;
			list.column = decl.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [117] struct_declaration_list = struct_declaration_list.list struct_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 2];
					final _struct_declaration decl = (_struct_declaration) _symbol_decl.value;
					
			list.add(decl);
			return _symbol_list;
				}
			},
			new Action() {	// [118] struct_declaration = specifier_qualifier_list.list1 struct_declarator_list.list2 pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list1 = _symbols[offset + 1];
					final List list1 = (List) _symbol_list1.value;
					final Symbol _symbol_list2 = _symbols[offset + 2];
					final List list2 = (List) _symbol_list2.value;
					
			_struct_declaration result = new _struct_declaration(list1, list2);
			result.line = list1.line;
			result.column = list1.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [119] specifier_qualifier_list = type_specifier.specifier specifier_qualifier_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final _type_specifier specifier = (_type_specifier) _symbol_specifier.value;
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			list.add(specifier);
			return _symbol_list;
				}
			},
			new Action() {	// [120] specifier_qualifier_list = type_specifier.specifier
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_specifier = _symbols[offset + 1];
					final _type_specifier specifier = (_type_specifier) _symbol_specifier.value;
					
			List list = new List();
			list.add(specifier);
			list.line = specifier.line;
			list.column = specifier.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [121] specifier_qualifier_list = type_qualifier.qualifier specifier_qualifier_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_qualifier = _symbols[offset + 1];
					final TypeQualifier qualifier = (TypeQualifier) _symbol_qualifier.value;
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			list.add(qualifier);
			return _symbol_list;
				}
			},
			new Action() {	// [122] specifier_qualifier_list = type_qualifier.qualifier
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_qualifier = _symbols[offset + 1];
					final TypeQualifier qualifier = (TypeQualifier) _symbol_qualifier.value;
					
			List list = new List();
			list.add(qualifier);
			list.line = qualifier.line;
			list.column = qualifier.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [123] struct_declarator_list = struct_declarator.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _struct_declarator decl = (_struct_declarator) _symbol_decl.value;
					
			List list = new List();
			list.add(decl);
			list.line = decl.line;
			list.column = decl.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [124] struct_declarator_list = struct_declarator_list.list pCOMMA struct_declarator.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 3];
					final _struct_declarator decl = (_struct_declarator) _symbol_decl.value;
					
			list.add(decl);
			return _symbol_list;
				}
			},
			new Action() {	// [125] struct_declarator = declarator.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _declarator decl = (_declarator) _symbol_decl.value;
					
			_struct_declarator result = new _normal_struct_declarator(decl);
			result.line = decl.line;
			result.column = decl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [126] struct_declarator = pCOLON constant_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
			_struct_declarator result = new _bitfield_struct_declarator(new Opt(), expr);
			result.line = expr.line;
			result.column = expr.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [127] struct_declarator = declarator.decl pCOLON constant_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _declarator decl = (_declarator) _symbol_decl.value;
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
			_struct_declarator result = new _bitfield_struct_declarator(new Opt(decl), expr);
			result.line = decl.line;
			result.column = decl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [128] enum_specifier = kENUM.token pBRACKETOPENCURLY enumerator_list.list pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					
			_enum_specifier result = new _enum_specifier(new Opt(), list);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [129] enum_specifier = kENUM.token IDENTIFIER.id pBRACKETOPENCURLY enumerator_list.list pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_id = _symbols[offset + 2];
					final Identifier id = (Identifier) _symbol_id.value;
					final Symbol _symbol_list = _symbols[offset + 4];
					final List list = (List) _symbol_list.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			_enum_specifier result = new _enum_specifier(new Opt(id), list);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [130] enum_specifier = kENUM.token pBRACKETOPENCURLY enumerator_list.list pCOMMA pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					
			_enum_specifier result = new _enum_specifier(new Opt(), list);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [131] enum_specifier = kENUM.token IDENTIFIER.id pBRACKETOPENCURLY enumerator_list.list pCOMMA pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_id = _symbols[offset + 2];
					final Identifier id = (Identifier) _symbol_id.value;
					final Symbol _symbol_list = _symbols[offset + 4];
					final List list = (List) _symbol_list.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			_enum_specifier result = new _enum_specifier(new Opt(id), list);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [132] enum_specifier = kENUM.token IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_id = _symbols[offset + 2];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			_enum_specifier result = new _enum_specifier(new Opt(id), new List());
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [133] enumerator_list = enumerator.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_elem = _symbols[offset + 1];
					final EnumerationElement elem = (EnumerationElement) _symbol_elem.value;
					
			List list = new List();
			list.add(elem);
			list.line = elem.line;
			list.column = elem.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [134] enumerator_list = enumerator_list.list pCOMMA enumerator.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 3];
					final EnumerationElement elem = (EnumerationElement) _symbol_elem.value;
					
			list.add(elem);
			return _symbol_list;
				}
			},
			new Action() {	// [135] enumerator = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			EnumerationElement result = new EnumerationElement(id, new Opt());
			result.line = Symbol.getLine(_symbol_id.getStart());
			result.column = Symbol.getColumn(_symbol_id.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [136] enumerator = IDENTIFIER.id pEQUALS constant_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final Identifier id = (Identifier) _symbol_id.value;
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			EnumerationElement result = new EnumerationElement(id, new Opt(expr));
			result.line = Symbol.getLine(_symbol_id.getStart());
			result.column = Symbol.getColumn(_symbol_id.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [137] type_qualifier = kCONST.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
						TypeQualifier result = new Const();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [138] type_qualifier = kRESTRICT.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			TypeQualifier result = new Restrict();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [139] type_qualifier = kVOLATILE.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			TypeQualifier result = new Volatile();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [140] function_specifier = kINLINE.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			FunctionSpecifier result = new Inline();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [141] declarator = pointer.point direct_declarator.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_point = _symbols[offset + 1];
					final _pointer point = (_pointer) _symbol_point.value;
					final Symbol _symbol_decl = _symbols[offset + 2];
					final _declarator decl = (_declarator) _symbol_decl.value;
					
			_declarator result = new _pointer_declarator(point, new Opt(decl));
			result.line = point.line;
			result.column = point.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [142] declarator = direct_declarator.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _declarator decl = (_declarator) _symbol_decl.value;
					
			return _symbol_decl;
				}
			},
			new Action() {	// [143] direct_declarator = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			_declarator result = new _simple_declarator(id);
			result.line = Symbol.getLine(_symbol_id.getStart());
			result.column = Symbol.getColumn(_symbol_id.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [144] direct_declarator = pBRACKETOPENROUND declarator.decl pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 2];
					final _declarator decl = (_declarator) _symbol_decl.value;
					
			return _symbol_decl;
				}
			},
			new Action() {	// [145] direct_declarator = direct_declarator.ddecl pBRACKETOPENSQUARE type_qualifier_list.list assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 4];
					final Expression expr = (Expression) _symbol_expr.value;
					
			_declarator result = new _array_declarator(new Opt(ddecl), list, new Opt(expr));
			result.line = ddecl.line;
			result.column = ddecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [146] direct_declarator = direct_declarator.ddecl pBRACKETOPENSQUARE type_qualifier_list.list pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					
			_declarator result = new _array_declarator(new Opt(ddecl), list, new Opt());
			result.line = ddecl.line;
			result.column = ddecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [147] direct_declarator = direct_declarator.ddecl pBRACKETOPENSQUARE assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
			_declarator result = new _array_declarator(new Opt(ddecl), new List(), new Opt(expr));
			result.line = ddecl.line;
			result.column = ddecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [148] direct_declarator = direct_declarator.ddecl pBRACKETOPENSQUARE kSTATIC type_qualifier_list.list assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					final Symbol _symbol_list = _symbols[offset + 4];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 5];
					final Expression expr = (Expression) _symbol_expr.value;
					
			throw new java.lang.UnsupportedOperationException(
				"The 'static' keyword for arrays is not supported (array[static]).");
				}
			},
			new Action() {	// [149] direct_declarator = direct_declarator.ddecl pBRACKETOPENSQUARE type_qualifier_list.list kSTATIC assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 5];
					final Expression expr = (Expression) _symbol_expr.value;
					
			throw new java.lang.UnsupportedOperationException(
				"The 'static' keyword for arrays is not supported (array[static]).");
				}
			},
			new Action() {	// [150] direct_declarator = direct_declarator.ddecl pBRACKETOPENSQUARE type_qualifier_list.list pSTAR pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					
			throw new java.lang.UnsupportedOperationException(
				"Variable length arrays are not supported (array[*]).");
				}
			},
			new Action() {	// [151] direct_declarator = direct_declarator.ddecl pBRACKETOPENSQUARE pSTAR pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					
			throw new java.lang.UnsupportedOperationException(
				"Variable length arrays are not supported (array[*]).");
				}
			},
			new Action() {	// [152] direct_declarator = direct_declarator.ddecl pBRACKETOPENSQUARE pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					
			_declarator result = new _array_declarator(new Opt(ddecl), new List(), new Opt());
			result.line = ddecl.line;
			result.column = ddecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [153] direct_declarator = direct_declarator.ddecl pBRACKETOPENROUND parameter_type_list.list pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final _parameter_type_list list = (_parameter_type_list) _symbol_list.value;
					
			_declarator result = new _function_declarator(new Opt(ddecl), new Opt(list));
			result.line = ddecl.line;
			result.column = ddecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [154] direct_declarator = direct_declarator.ddecl pBRACKETOPENROUND identifier_list.list pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					
			throw new java.lang.UnsupportedOperationException(
				"Old function style definitions are not supported.");
			/*
			_declarator result = new _function_declarator_old_style(ddecl, list);
			result.line = ddecl.line;
			result.column = ddecl.column;
			return new Symbol(result);
			*/
				}
			},
			new Action() {	// [155] direct_declarator = direct_declarator.ddecl pBRACKETOPENROUND pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ddecl = _symbols[offset + 1];
					final _declarator ddecl = (_declarator) _symbol_ddecl.value;
					
			throw new java.lang.UnsupportedOperationException(
				"Old function style definitions are not supported.");
			/*
			_declarator result = new _function_declarator_old_style(ddecl, new List());
			result.line = ddecl.line;
			result.column = ddecl.column;
			return new Symbol(result);
			*/
				}
			},
			new Action() {	// [156] pointer = pSTAR.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			_pointer result = new _pointer(new List(), new Opt());
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [157] pointer = pSTAR.token type_qualifier_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			_pointer result = new _pointer(list, new Opt());
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [158] pointer = pSTAR.token pointer.point
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_point = _symbols[offset + 2];
					final _pointer point = (_pointer) _symbol_point.value;
					
			_pointer result = new _pointer(new List(), new Opt(point));
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [159] pointer = pSTAR.token type_qualifier_list.list pointer.point
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_point = _symbols[offset + 3];
					final _pointer point = (_pointer) _symbol_point.value;
					
			_pointer result = new _pointer(list, new Opt(point));
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [160] type_qualifier_list = type_qualifier.tq
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_tq = _symbols[offset + 1];
					final TypeQualifier tq = (TypeQualifier) _symbol_tq.value;
					
			List list = new List();
			list.add(tq);
			list.line = tq.line;
			list.column = tq.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [161] type_qualifier_list = type_qualifier_list.list type_qualifier.tq
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_tq = _symbols[offset + 2];
					final TypeQualifier tq = (TypeQualifier) _symbol_tq.value;
					
			list.add(tq);
			return _symbol_list;
				}
			},
			new Action() {	// [162] parameter_type_list = parameter_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					
			_parameter_type_list result = new _parameter_type_list(list, false);
			result.line = list.line;
			result.column = list.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [163] parameter_type_list = parameter_list.list pCOMMA pPOINT_POINT_POINT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					
			_parameter_type_list result = new _parameter_type_list(list, true);
			result.line = list.line;
			result.column = list.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [164] parameter_list = parameter_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _parameter_declaration decl = (_parameter_declaration) _symbol_decl.value;
					
			List list = new List();
			list.add(decl);
			list.line = decl.line;
			list.column = decl.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [165] parameter_list = parameter_list.list pCOMMA parameter_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 3];
					final _parameter_declaration decl = (_parameter_declaration) _symbol_decl.value;
					
			list.add(decl);
			return _symbol_list;
				}
			},
			new Action() {	// [166] parameter_declaration = declaration_specifiers.ds declarator.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 1];
					final List ds = (List) _symbol_ds.value;
					final Symbol _symbol_decl = _symbols[offset + 2];
					final _declarator decl = (_declarator) _symbol_decl.value;
					
			_parameter_declaration result = new _parameter_declaration(ds, new Opt(decl));
			result.line = ds.line;
			result.column = ds.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [167] parameter_declaration = declaration_specifiers.ds abstract_declarator.adecl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 1];
					final List ds = (List) _symbol_ds.value;
					final Symbol _symbol_adecl = _symbols[offset + 2];
					final _declarator adecl = (_declarator) _symbol_adecl.value;
					
			_parameter_declaration result = new _parameter_declaration(ds, new Opt(adecl));
			result.line = ds.line;
			result.column = ds.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [168] parameter_declaration = declaration_specifiers.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 1];
					final List ds = (List) _symbol_ds.value;
					
			_parameter_declaration result = new _parameter_declaration(ds, new Opt());
			result.line = ds.line;
			result.column = ds.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [169] identifier_list = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			List list = new List();
			list.add(id);
			list.line = id.line;
			list.column = id.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [170] identifier_list = identifier_list.list pCOMMA IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_id = _symbols[offset + 3];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			list.add(id);
			return _symbol_list;
				}
			},
			new Action() {	// [171] type_name = specifier_qualifier_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					
			_type_name result =
				new _type_name(list, new Opt());
			result.line = list.line;
			result.column = list.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [172] type_name = specifier_qualifier_list.list abstract_declarator.adecl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_adecl = _symbols[offset + 2];
					final _declarator adecl = (_declarator) _symbol_adecl.value;
					
			_type_name result =
				new _type_name(list, new Opt(adecl));
			result.line = list.line;
			result.column = list.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [173] abstract_declarator = pointer.point
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_point = _symbols[offset + 1];
					final _pointer point = (_pointer) _symbol_point.value;
					
			_declarator result = new _pointer_declarator(point, new Opt());
			result.line = point.line;
			result.column = point.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [174] abstract_declarator = direct_abstract_declarator.dadecl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					
			return _symbol_dadecl;
				}
			},
			new Action() {	// [175] abstract_declarator = pointer.point direct_abstract_declarator.dadecl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_point = _symbols[offset + 1];
					final _pointer point = (_pointer) _symbol_point.value;
					final Symbol _symbol_dadecl = _symbols[offset + 2];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					
			_declarator result = new _pointer_declarator(point, new Opt(dadecl));
			result.line = point.line;
			result.column = point.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [176] direct_abstract_declarator = pBRACKETOPENROUND abstract_declarator.adecl pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_adecl = _symbols[offset + 2];
					final _declarator adecl = (_declarator) _symbol_adecl.value;
					
			return _symbol_adecl;
				}
			},
			new Action() {	// [177] direct_abstract_declarator = pBRACKETOPENSQUARE.brOp pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					
			_declarator result = new _array_declarator(new Opt(), new List(), new Opt());
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [178] direct_abstract_declarator = pBRACKETOPENSQUARE.brOp type_qualifier_list.list pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			_declarator result = new _array_declarator(new Opt(), list, new Opt());
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [179] direct_abstract_declarator = pBRACKETOPENSQUARE.brOp assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
			_declarator result = new _array_declarator(new Opt(), new List(), new Opt(expr));
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [180] direct_abstract_declarator = pBRACKETOPENSQUARE.brOp type_qualifier_list.list assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
			_declarator result = new _array_declarator(new Opt(), list, new Opt(expr));
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [181] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENSQUARE pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					
			_declarator result = new _array_declarator(new Opt(dadecl), new List(), new Opt());
			result.line = dadecl.line;
			result.column = dadecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [182] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENSQUARE type_qualifier_list.list pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					
			_declarator result = new _array_declarator(new Opt(dadecl), list, new Opt());
			result.line = dadecl.line;
			result.column = dadecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [183] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENSQUARE assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
			_declarator result = new _array_declarator(new Opt(dadecl), new List(), new Opt(expr));
			result.line = dadecl.line;
			result.column = dadecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [184] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENSQUARE type_qualifier_list.list assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 4];
					final Expression expr = (Expression) _symbol_expr.value;
					
			_declarator result = new _array_declarator(new Opt(dadecl), list, new Opt(expr));
			result.line = dadecl.line;
			result.column = dadecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [185] direct_abstract_declarator = pBRACKETOPENSQUARE.brOp kSTATIC assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
			throw new java.lang.UnsupportedOperationException(
				"The 'static' keyword for arrays is not supported (array[static]).");
				}
			},
			new Action() {	// [186] direct_abstract_declarator = pBRACKETOPENSQUARE.brOp kSTATIC type_qualifier_list.list assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 4];
					final Expression expr = (Expression) _symbol_expr.value;
					
			throw new java.lang.UnsupportedOperationException(
				"The 'static' keyword for arrays is not supported (array[static]).");
				}
			},
			new Action() {	// [187] direct_abstract_declarator = pBRACKETOPENSQUARE.brOp type_qualifier_list.list kSTATIC assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 4];
					final Expression expr = (Expression) _symbol_expr.value;
					
			throw new java.lang.UnsupportedOperationException(
				"The 'static' keyword for arrays is not supported (array[static]).");
				}
			},
			new Action() {	// [188] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENSQUARE.brOp kSTATIC assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					final Symbol brOp = _symbols[offset + 2];
					final Symbol _symbol_expr = _symbols[offset + 4];
					final Expression expr = (Expression) _symbol_expr.value;
					
			throw new java.lang.UnsupportedOperationException(
				"The 'static' keyword for arrays is not supported (array[static]).");
				}
			},
			new Action() {	// [189] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENSQUARE.brOp kSTATIC type_qualifier_list.list assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					final Symbol brOp = _symbols[offset + 2];
					final Symbol _symbol_list = _symbols[offset + 4];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 5];
					final Expression expr = (Expression) _symbol_expr.value;
					
			throw new java.lang.UnsupportedOperationException(
				"The 'static' keyword for arrays is not supported (array[static]).");
				}
			},
			new Action() {	// [190] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENSQUARE.brOp type_qualifier_list.list kSTATIC assignment_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					final Symbol brOp = _symbols[offset + 2];
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 5];
					final Expression expr = (Expression) _symbol_expr.value;
					
			throw new java.lang.UnsupportedOperationException(
				"The 'static' keyword for arrays is not supported (array[static]).");
				}
			},
			new Action() {	// [191] direct_abstract_declarator = pBRACKETOPENSQUARE pSTAR pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
			throw new java.lang.UnsupportedOperationException(
				"Variable length arrays are not supported (array[*]).");
				}
			},
			new Action() {	// [192] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENSQUARE pSTAR pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					
			throw new java.lang.UnsupportedOperationException(
				"Variable length arrays are not supported (array[*]).");
				}
			},
			new Action() {	// [193] direct_abstract_declarator = pBRACKETOPENROUND.brOp pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					
			_declarator result = new _function_declarator(new Opt(), new Opt());
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [194] direct_abstract_declarator = pBRACKETOPENROUND.brOp parameter_type_list.list pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final _parameter_type_list list = (_parameter_type_list) _symbol_list.value;
					
			_declarator result = new _function_declarator(new Opt(), new Opt(list));
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [195] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENROUND pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					
			_declarator result = new _function_declarator(new Opt(dadecl), new Opt());
			result.line = dadecl.line;
			result.column = dadecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [196] direct_abstract_declarator = direct_abstract_declarator.dadecl pBRACKETOPENROUND parameter_type_list.list pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dadecl = _symbols[offset + 1];
					final _declarator dadecl = (_declarator) _symbol_dadecl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final _parameter_type_list list = (_parameter_type_list) _symbol_list.value;
					
			_declarator result = new _function_declarator(new Opt(dadecl), new Opt(list));
			result.line = dadecl.line;
			result.column = dadecl.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [197] initializer = assignment_expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			AtomicInitializer result = new AtomicInitializer(expr);
			result.line = expr.line;
			result.column = expr.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [198] initializer = pBRACKETOPENCURLY.brOp initializer_list.list pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			CompoundInitializer result = new CompoundInitializer(list);
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [199] initializer = pBRACKETOPENCURLY.brOp initializer_list.list pCOMMA pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			CompoundInitializer result = new CompoundInitializer(list);
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [200] initializer_list = initializer.init
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_init = _symbols[offset + 1];
					final Initializer init = (Initializer) _symbol_init.value;
					
			List list = new List();
			list.line = init.line;
			list.column = init.column;
			InitializerElement elem = null;
			if (init instanceof AtomicInitializer) {
				Expression value = ((AtomicInitializer)init).getValue();
				((AtomicInitializer)init).setValue(null);
				elem = new ElementInitialization(new Opt(), value);
				list.add(elem);
			} else {
				elem = new InnerInitialization(new Opt(), (CompoundInitializer)init);
				list.add(elem);
			}
			elem.line = init.line;
			elem.column = init.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [201] initializer_list = designation.des initializer.init
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_des = _symbols[offset + 1];
					final DesignatorAccess des = (DesignatorAccess) _symbol_des.value;
					final Symbol _symbol_init = _symbols[offset + 2];
					final Initializer init = (Initializer) _symbol_init.value;
					
			List list = new List();
			list.line = init.line;
			list.column = init.column;
			InitializerElement elem = null;
			if (init instanceof AtomicInitializer) {
				Expression value = ((AtomicInitializer)init).getValue();
				((AtomicInitializer)init).setValue(null);
				elem = new ElementInitialization(new Opt(des), value);
				list.add(elem);
			} else {
				elem = new InnerInitialization(new Opt(des), (CompoundInitializer)init);
				list.add(elem);
			}
			elem.line = init.line;
			elem.column = init.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [202] initializer_list = initializer_list.list pCOMMA initializer.init
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_init = _symbols[offset + 3];
					final Initializer init = (Initializer) _symbol_init.value;
					
			InitializerElement elem = null;
			if (init instanceof AtomicInitializer) {
				Expression value = ((AtomicInitializer)init).getValue();
				((AtomicInitializer)init).setValue(null);
				elem = new ElementInitialization(new Opt(), value);
				list.add(elem);
			} else {
				elem = new InnerInitialization(new Opt(), (CompoundInitializer)init);
				list.add(elem);
			}
			elem.line = init.line;
			elem.column = init.column;
			return _symbol_list;
				}
			},
			new Action() {	// [203] initializer_list = initializer_list.list pCOMMA designation.des initializer.init
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_des = _symbols[offset + 3];
					final DesignatorAccess des = (DesignatorAccess) _symbol_des.value;
					final Symbol _symbol_init = _symbols[offset + 4];
					final Initializer init = (Initializer) _symbol_init.value;
					
			InitializerElement elem = null;
			if (init instanceof AtomicInitializer) {
				Expression value = ((AtomicInitializer)init).getValue();
				((AtomicInitializer)init).setValue(null);
				elem = new ElementInitialization(new Opt(des), value);
				list.add(elem);
			} else {
				elem = new InnerInitialization(new Opt(des), (CompoundInitializer)init);
				list.add(elem);
			}
			elem.line = init.line;
			elem.column = init.column;
			return _symbol_list;
				}
			},
			new Action() {	// [204] designation = designator_list.des pEQUALS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_des = _symbols[offset + 1];
					final DesignatorAccess des = (DesignatorAccess) _symbol_des.value;
					
			return _symbol_des;
				}
			},
			new Action() {	// [205] designator_list = designator.des
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_des = _symbols[offset + 1];
					final DesignatorAccess des = (DesignatorAccess) _symbol_des.value;
					
			return _symbol_des;
				}
			},
			new Action() {	// [206] designator_list = designator_list.des1 designator.des2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_des1 = _symbols[offset + 1];
					final DesignatorAccess des1 = (DesignatorAccess) _symbol_des1.value;
					final Symbol _symbol_des2 = _symbols[offset + 2];
					final DesignatorAccess des2 = (DesignatorAccess) _symbol_des2.value;
					
			des2.setDesignation(des1);
			return _symbol_des2;
				}
			},
			new Action() {	// [207] designator = pBRACKETOPENSQUARE.token constant_expression.expr pBRACKETCLOSESQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
			ArrayAccess result = new ArrayAccess(new Opt(), expr);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [208] designator = pPOINT.token IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_id = _symbols[offset + 2];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			MemberAccess result = new MemberAccess(new Opt(), id);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [209] statement = labeled_statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			return _symbol_stmt;
				}
			},
			new Action() {	// [210] statement = compound_statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final CompoundStatement stmt = (CompoundStatement) _symbol_stmt.value;
					
			return _symbol_stmt;
				}
			},
			new Action() {	// [211] statement = expression_statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			return _symbol_stmt;
				}
			},
			new Action() {	// [212] statement = selection_statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			return _symbol_stmt;
				}
			},
			new Action() {	// [213] statement = iteration_statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			return _symbol_stmt;
				}
			},
			new Action() {	// [214] statement = jump_statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			return _symbol_stmt;
				}
			},
			new Action() {	// [215] labeled_statement = IDENTIFIER.id pCOLON.token statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final Identifier id = (Identifier) _symbol_id.value;
					final Symbol token = _symbols[offset + 2];
					final Symbol _symbol_stmt = _symbols[offset + 3];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			LabeledStatement result = new ExplicitLabeledStatement(stmt, id);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [216] labeled_statement = kCASE.token constant_expression.expr pCOLON statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol _symbol_stmt = _symbols[offset + 4];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			LabeledStatement result = new CaseLabel(stmt, expr);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [217] labeled_statement = kDEFAULT.token pCOLON statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_stmt = _symbols[offset + 3];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			LabeledStatement result = new DefaultLabel(stmt);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [218] compound_statement = pBRACKETOPENCURLY.brOp pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					
			CompoundStatement result = new CompoundStatement(new List());
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [219] compound_statement = pBRACKETOPENCURLY.brOp block_item_list.list pBRACKETCLOSECURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol brOp = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final List list = (List) _symbol_list.value;
					
			CompoundStatement result = new CompoundStatement(list);
			result.line = Symbol.getLine(brOp.getStart());
			result.column = Symbol.getColumn(brOp.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [220] block_item_list = block_item.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			List list = new List();
			list.add(stmt);
			list.line = stmt.line;
			list.column = stmt.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [221] block_item_list = block_item_list.list block_item.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_stmt = _symbols[offset + 2];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			list.add(stmt);
			return _symbol_list;
				}
			},
			new Action() {	// [222] block_item = declaration.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final _IntermediateDeclarationCollection stmt = (_IntermediateDeclarationCollection) _symbol_stmt.value;
					
			return _symbol_stmt;
				}
			},
			new Action() {	// [223] block_item = statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			return _symbol_stmt;
				}
			},
			new Action() {	// [224] expression_statement = pSEMICOLON.token
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			EmptyStatement result = new EmptyStatement();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [225] expression_statement = expression.expr pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
			ExpressionStatement result = new ExpressionStatement(expr);
			result.line = expr.line;
			result.column = expr.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [226] selection_statement = kIF.token pBRACKETOPENROUND expression.expr pBRACKETCLOSEROUND statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol _symbol_stmt = _symbols[offset + 5];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			IfStatement result = new IfStatement(expr, stmt, new Opt());
			result.line = expr.line;
			result.column = expr.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [227] selection_statement = kIF.token pBRACKETOPENROUND expression.expr pBRACKETCLOSEROUND statement.stmt1 kELSE statement.stmt2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol _symbol_stmt1 = _symbols[offset + 5];
					final Statement stmt1 = (Statement) _symbol_stmt1.value;
					final Symbol _symbol_stmt2 = _symbols[offset + 7];
					final Statement stmt2 = (Statement) _symbol_stmt2.value;
					
			IfStatement result = new IfStatement(expr, stmt1, new Opt(stmt2));
			result.line = expr.line;
			result.column = expr.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [228] selection_statement = kSWITCH.token pBRACKETOPENROUND expression.expr pBRACKETCLOSEROUND statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol _symbol_stmt = _symbols[offset + 5];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			SwitchStatement result = new SwitchStatement(expr, stmt);
			result.line = expr.line;
			result.column = expr.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [229] iteration_statement = kWHILE.token pBRACKETOPENROUND expression.expr pBRACKETCLOSEROUND statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol _symbol_stmt = _symbols[offset + 5];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
			WhileStatement result = new WhileStatement(expr, stmt);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [230] iteration_statement = kDO.token statement.stmt kWHILE pBRACKETOPENROUND expression.expr pBRACKETCLOSEROUND pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_stmt = _symbols[offset + 2];
					final Statement stmt = (Statement) _symbol_stmt.value;
					final Symbol _symbol_expr = _symbols[offset + 5];
					final Expression expr = (Expression) _symbol_expr.value;
					
			DoWhileStatement result = new DoWhileStatement(expr, stmt);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [231] iteration_statement = kFOR.token pBRACKETOPENROUND expression_statement.expr1 expression_statement.expr2 pBRACKETCLOSEROUND statement.body
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_expr1 = _symbols[offset + 3];
					final Statement expr1 = (Statement) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 4];
					final Statement expr2 = (Statement) _symbol_expr2.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final Statement body = (Statement) _symbol_body.value;
					
			Opt init;
			if (expr1 instanceof ExpressionStatement)
				init = new Opt(((ExpressionStatement)expr1).getExpression());
			else init = new Opt();
			
			Expression cond;
			if (expr2 instanceof ExpressionStatement)
				cond = ((ExpressionStatement)expr2).getExpression();
			else {
				cond = new IntegerConstant(
						"1",
						"1",
						new NumeralSystemDecimal(),
						new PrimitiveType(new List(), jastaddc.semantics.PrimitiveTypes._signed_int));
				cond.line = expr1.line;
				cond.column = expr1.column;
			}
			
			Opt iter = new Opt();
			
			ForStatement result = new ForStatement(cond, body, init, iter);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [232] iteration_statement = kFOR.token pBRACKETOPENROUND expression_statement.expr1 expression_statement.expr2 expression.expr3 pBRACKETCLOSEROUND statement.body
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_expr1 = _symbols[offset + 3];
					final Statement expr1 = (Statement) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 4];
					final Statement expr2 = (Statement) _symbol_expr2.value;
					final Symbol _symbol_expr3 = _symbols[offset + 5];
					final Expression expr3 = (Expression) _symbol_expr3.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final Statement body = (Statement) _symbol_body.value;
					
			Opt init;
			if (expr1 instanceof ExpressionStatement)
				init = new Opt(((ExpressionStatement)expr1).getExpression());
			else init = new Opt();
			
			Expression cond;
			if (expr2 instanceof ExpressionStatement)
				cond = ((ExpressionStatement)expr2).getExpression();
			else {
				cond = new IntegerConstant(
						"1",
						"1",
						new NumeralSystemDecimal(),
						new PrimitiveType(new List(), jastaddc.semantics.PrimitiveTypes._signed_int));
				cond.line = expr1.line;
				cond.column = expr1.column;
			}
			
			Opt iter = new Opt(expr3);
			
			ForStatement result = new ForStatement(cond, body, init, iter);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [233] iteration_statement = kFOR.token pBRACKETOPENROUND declaration.init expression_statement.expr2 pBRACKETCLOSEROUND statement.body
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_init = _symbols[offset + 3];
					final _IntermediateDeclarationCollection init = (_IntermediateDeclarationCollection) _symbol_init.value;
					final Symbol _symbol_expr2 = _symbols[offset + 4];
					final Statement expr2 = (Statement) _symbol_expr2.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final Statement body = (Statement) _symbol_body.value;
					
			Expression cond;
			if (expr2 instanceof ExpressionStatement)
				cond = ((ExpressionStatement)expr2).getExpression();
			else {
				cond = new IntegerConstant(
						"1",
						"1",
						new NumeralSystemDecimal(),
						new PrimitiveType(new List(), jastaddc.semantics.PrimitiveTypes._signed_int));
				cond.line = init.line;
				cond.column = init.column;
			}
						
			Opt iter = new Opt();
			
			ForStatement_Decl result = new ForStatement_Decl(cond, body, new Opt(init), iter);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [234] iteration_statement = kFOR.token pBRACKETOPENROUND declaration.init expression_statement.expr2 expression.expr3 pBRACKETCLOSEROUND statement.body
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_init = _symbols[offset + 3];
					final _IntermediateDeclarationCollection init = (_IntermediateDeclarationCollection) _symbol_init.value;
					final Symbol _symbol_expr2 = _symbols[offset + 4];
					final Statement expr2 = (Statement) _symbol_expr2.value;
					final Symbol _symbol_expr3 = _symbols[offset + 5];
					final Expression expr3 = (Expression) _symbol_expr3.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final Statement body = (Statement) _symbol_body.value;
					
			Expression cond;
			if (expr2 instanceof ExpressionStatement)
				cond = ((ExpressionStatement)expr2).getExpression();
			else {
				cond = new IntegerConstant(
						"1",
						"1",
						new NumeralSystemDecimal(),
						new PrimitiveType(new List(), jastaddc.semantics.PrimitiveTypes._signed_int));
				cond.line = init.line;
				cond.column = init.column;
			}
						
			Opt iter = new Opt(expr3);
			
			ForStatement_Decl result = new ForStatement_Decl(cond, body, new Opt(init), iter);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [235] jump_statement = kGOTO.token IDENTIFIER.id pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_id = _symbols[offset + 2];
					final Identifier id = (Identifier) _symbol_id.value;
					
			id.line = Symbol.getLine(_symbol_id.getStart());
			id.column = Symbol.getColumn(_symbol_id.getStart());
			GotoJump result = new GotoJump(id);
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [236] jump_statement = kCONTINUE.token pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			ContinueJump result = new ContinueJump();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [237] jump_statement = kBREAK.token pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			BreakJump result = new BreakJump();
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [238] jump_statement = kRETURN.token pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					
			ReturnJump result = new ReturnJump(new Opt());
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [239] jump_statement = kRETURN.token expression.expr pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol token = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
			ReturnJump result = new ReturnJump(new Opt(expr));
			result.line = Symbol.getLine(token.getStart());
			result.column = Symbol.getColumn(token.getStart());
			return new Symbol(result);
				}
			},
			new Action() {	// [240] translation_unit = external_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _IntermediateDeclarationCollection decl = (_IntermediateDeclarationCollection) _symbol_decl.value;
					
			List list = new List();
			list.add(decl);
			list.line = decl.line;
			list.column = decl.column;
			return new Symbol(list);
				}
			},
			new Action() {	// [241] translation_unit = translation_unit.list external_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List list = (List) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 2];
					final _IntermediateDeclarationCollection decl = (_IntermediateDeclarationCollection) _symbol_decl.value;
					
			list.add(decl);
			return _symbol_list;
				}
			},
			new Action() {	// [242] external_declaration = function_definition.func
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_func = _symbols[offset + 1];
					final _IntermediateDeclarationCollection func = (_IntermediateDeclarationCollection) _symbol_func.value;
					
			return _symbol_func;
				}
			},
			new Action() {	// [243] external_declaration = declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _IntermediateDeclarationCollection decl = (_IntermediateDeclarationCollection) _symbol_decl.value;
					
			return _symbol_decl;
				}
			},
			new Action() {	// [244] function_definition = declaration_specifiers.spec declarator.decl declaration_list.list compound_statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_spec = _symbols[offset + 1];
					final List spec = (List) _symbol_spec.value;
					final Symbol _symbol_decl = _symbols[offset + 2];
					final _declarator decl = (_declarator) _symbol_decl.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final java.util.List list = (java.util.List) _symbol_list.value;
					final Symbol _symbol_stmt = _symbols[offset + 4];
					final CompoundStatement stmt = (CompoundStatement) _symbol_stmt.value;
					
			throw new java.lang.UnsupportedOperationException(
				"Old function style definitions are not supported.");
				}
			},
			new Action() {	// [245] function_definition = declaration_specifiers.spec declarator.decl compound_statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_spec = _symbols[offset + 1];
					final List spec = (List) _symbol_spec.value;
					final Symbol _symbol_decl = _symbols[offset + 2];
					final _declarator decl = (_declarator) _symbol_decl.value;
					final Symbol _symbol_stmt = _symbols[offset + 3];
					final CompoundStatement stmt = (CompoundStatement) _symbol_stmt.value;
					
			_function_definition result =
				new _function_definition(
					spec,
					decl,
					stmt);
			result.line = spec.line;
			result.column = spec.column;
			return new Symbol(result);
				}
			},
			new Action() {	// [246] declaration_list = declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final _IntermediateDeclarationCollection decl = (_IntermediateDeclarationCollection) _symbol_decl.value;
					
			java.util.List list = new java.util.LinkedList<Declaration>();
			list.add(decl);
			return new Symbol(list);
				}
			},
			new Action() {	// [247] declaration_list = declaration_list.list declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final java.util.List list = (java.util.List) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 2];
					final _IntermediateDeclarationCollection decl = (_IntermediateDeclarationCollection) _symbol_decl.value;
					
			list.add(decl);
			return _symbol_list;
				}
			}
		};

 /* no additional constructor operations */
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
