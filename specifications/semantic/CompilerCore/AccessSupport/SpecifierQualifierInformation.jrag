/*
	This program and the accompanying materials are made available under the
	terms of the MIT license (X11 license) which accompanies this distribution.
	
	Author: Christoff BÃ¼rger
*/

aspect SpecifierQualifierInformation {
	eq Declaration.IsSpecifiedBy(StorageClassSpecifier spec) {
		if (spec == null)
			return false;
		for (int i = 0; i < getNumStorageClassSpecifier(); i++)
			if (spec.getClass().isInstance(getStorageClassSpecifier(i)))
				return true;
		return false;
	}
	
	eq Declaration.IsSpecifiedBy(FunctionSpecifier spec) {
		if (spec == null)
			return false;
		for (int i = 0; i < getNumFunctionSpecifier(); i++)
			if (spec.getClass().isInstance(getFunctionSpecifier(i)))
				return true;
		return false;
	}
	
	eq Type.IsQualifiedBy(TypeQualifier qual) {
		if (qual == null)
			return false;
		for (int i = 0; i < getNumTypeQualifier(); i++)
			if (qual.getClass().isInstance(getTypeQualifier(i)))
				return true;
		return false;
	}
}
