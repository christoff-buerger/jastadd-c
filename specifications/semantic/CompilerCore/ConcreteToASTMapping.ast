/*
	This program and the accompanying materials are made available under the
	terms of the MIT license (X11 license) which accompanies this distribution.
	
	Author: Christoff BÃ¼rger
*/

/**
 * The following AST parts are intermediate nodes. Their tree corresponds the one
 * of the C99 standard grammar, so the parser can construct it easily. The final
 * AST nodes form much better to understand trees, so they are easy to evaluate
 * semantical. Thus the AST parts described here have to be be rewritten to their
 * final AST nodes (e.g. DeclarationCollection, Type). They only represent an
 * intermediate state of the tree and their rewrites are the mapping of the
 * concrete syntax to the abstract syntax.
 * 
 * Names of AST nodes, which will be rewritten to map the concrete syntax to the
 * abstract one, start with an underscore (_). Their names are identical to the one
 * of the C99 standard grammar rule ([A.2.1] S.409) they represent.
 * 
 * Final AST tree parts, which are easy to construct by the parser (Statements,
 * Expressions, etc.), will be constructed directly, thus a rewrite is not neccessary.
 * 
 * IMPORTANT: If an intermediate node has final AST nodes as child nodes, these final
 * nodes must be terminal nodes of the intermediate node, thus intermediate nodes must
 * not have final AST nodes as subtree. Such "terminals" represent final AST parts
 * allready constructed, which will be used by the final AST node constructed for
 * an intermediate node. The advantages of these strategy are:
 *  - inherited attributes associated with final AST nodes don't need any equation
 *    if the final node is a terminal of an intermediate node. Thus, inherited
 *    attributes are also not avaible for "subtrees" of intermediate nodes (
 *    correct behavior, as their semantics are not specified for intermediate trees).
 *  - the "subtree terminals" of intermediate nodes can be used as child nodes of
 *    the final AST node constructed for the intermediate node. They do not have to
 *    be deeply copied and no malformed intermediate trees are constructed (if
 *    such final "subtrees" would be ordinary tree child nodes of the intermediate
 *    node, always such a "subtree" is setted as child of a newly constructed final
 *    AST node, which represents the mapping from the concrete to the abstract syntax
 *    for an intermediate node, the intermediate node's link to these final "subtree"
 *    child would be broken, resulting into null pointer exceptions or not binary
 *    mappings between intermediate parent node and "subtree" final AST node child
 *    if the "subtree" child is invoken.)
 * 
 * IMPORTANT: The attributes and methods of final AST nodes, which are terminals of
 * intermediate nodes must never be called. Their behavior is undefined (Most times
 * their invocation will result in null pointer exceptions).
 * 
 * For additional informations check the specification of the final AST ('C99AST.ast').
 */

/**
 * Declarations have to be rewritten to collections containing
 * each entity declared explicitly.
 */
_declaration:_IntermediateDeclarationCollection ::= _declaration_specifiers* _init_declarator*;
/**
 * Function definitions have to be rewritten to a DeclarationCollection containing one
 * FunctionDeclaration.
 * 
 * PARSER-CONSTRAINT: The declarator must not be an abstract_declarator.
 */
_function_definition:_IntermediateDeclarationCollection ::= _declaration_specifiers* _declarator <Body:CompoundStatement>;

_pointer ::= <TypeQualifier:List<TypeQualifier>> [_pointer];

/**
 * The declarator can only be left, if it is an abstract_declarator.
 */
_parameter_declaration ::= _declaration_specifiers* [_declarator];

_parameter_type_list ::= _parameter_declaration* <IsVariadicFunction:boolean>;

/**
 * For more convenient concrete trees abstract declarators are also modeled
 * by declarators having no binded name, thus declarators constructed without
 * using the rule "direct_declarator -> identifier".
 * 
 * BEWARE :
 *  - Variable array lengths are not modeled ([*]).
 *  - static storage class specifier in function array parameters are not
 *    supported. E.g.: void func(int array[static])
 *  - old style function definitions are not supported
 */
abstract _declarator;
	
 	/**
 	 * A _simple_declarator represents a binded name, thus it never
 	 * represents an abstract declarator.
 	 */
	_simple_declarator:_declarator ::= <Name:Identifier>;
	/**
	 * PARSER-CONSTRAINT: Only for abstract declarator the _declarator may be left.
	 */
	_pointer_declarator:_declarator ::= _pointer [_declarator];
	/**
	 * PARSER-CONSTRAINT: Only for abstract declarator the _declarator may be left.
	 */
	_array_declarator:_declarator ::= [_declarator] <TypeQualifier:List<TypeQualifier>> <Dimension:Opt<Expression>>;
	/**
	 * PARSER-CONSTRAINT: Only for abstract declarator the _parameter_type_list
	 * and/or _declarator may be left.
	 */
	_function_declarator:_declarator ::= [_declarator] [_parameter_type_list];

/**
 * PARSER-CONSTRAINT: The declarator must not be an abstract declarator.
 */
_init_declarator ::= _declarator <Initializer:Opt<Initializer>>;

abstract _declaration_specifiers;
	
	abstract _specifier_qualifier:_declaration_specifiers;
			
		abstract _type_specifier:_specifier_qualifier;
		
			/**
			 * Atomic types are:
			 *  - void
			 *  - char
			 *  - int
			 *  - long
			 *  - float
			 *  - double
			 *  - signed
			 *  - unsigned
			 *  - _Bool
			 *  - _Complex
			 *  - _Imaginary
			 */
			_atomic_type:_type_specifier ::= <TypeName:String>;
			/**
			 * Incomplete structure or unions ([6.2.5:22] S.36) have no
			 *_struct_declaration, thus their _struct_declaration list
			 * is empty.
			 */
			_struct_or_union_specifier:_type_specifier ::= _struct_or_union <Tag:Opt<Identifier>> _struct_declaration*;
			_enum_specifier:_type_specifier ::= <Tag:Opt<Identifier>> <_enumerators:List<EnumerationElement>>;
			_typedef_name:_type_specifier ::= <Name:Identifier>;
			
abstract _struct_or_union;

	_struct:_struct_or_union;
	_union:_struct_or_union;

_struct_declaration ::= _specifier_qualifier* _struct_declarator*;

/**
 * PARSER-CONSTRAINT: The declarator must not be an abstract_declarator.
 */
abstract _struct_declarator;
	
	_normal_struct_declarator:_struct_declarator ::= _declarator;
	_bitfield_struct_declarator:_struct_declarator ::= [_declarator] <BitFieldSize:Expression>;

/**
 * type_name's represent C99 types (e.g. in cast or sizeof expressions).
 * A type_name has to be rewritten to represent a Type node.
 * 
 * PARSER-CONSTRAINT: The declarator must be an abstract_declarator.
 */
_type_name:_IntermediateType ::= _specifier_qualifier* [_declarator];
