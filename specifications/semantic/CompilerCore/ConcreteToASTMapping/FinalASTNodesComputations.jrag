/*
	This program and the accompanying materials are made available under the
	terms of the MIT license (X11 license) which accompanies this distribution.
	
	Author: Christoff BÃ¼rger
*/

/**
 * Aspect realizing the computation of the final AST represented by an intermediate
 * node. This includes the computations for:
 *  - _declarator: type + qualifier + specifier + possible name binding
 *  - _function_definition: type + qualifier + specifier + binded name
 *  - _pointer: type (also the pointed to type) + qualifier
 *  - _parameter_declaration: List of declarations, one declaration for each parameter
 *  - _struct_or_union_specifier: structure represented + qualifier
 *  - _enum_specifier: enumeration represented + qualifier
 *  - _typedef_name: type (TypedefTypeReference) + qualifier
 *  - _type_name: type + qualifier
 */
aspect FinalASTNodesComputations {
/* *********************************************** DECLARATORS: TYPES AND BINDED NAMES *********************************************** */
	
	/**
	 * Decide whether a declarator is an abstract declarator or not and find
	 * the name binded with a non abstract declarator:
	 */
	syn boolean _declarator.IsAbstractDeclarator() =
		BindedNameOfDeclaratorTree() == null ? true : false;
	syn Identifier _declarator.BindedNameOfDeclaratorTree();
	eq _simple_declarator.BindedNameOfDeclaratorTree() = getName();
	eq _pointer_declarator.BindedNameOfDeclaratorTree() =
		has_declarator() ? get_declarator().BindedNameOfDeclaratorTree() : null;
	eq _array_declarator.BindedNameOfDeclaratorTree() =
		has_declarator() ? get_declarator().BindedNameOfDeclaratorTree() : null;
	eq _function_declarator.BindedNameOfDeclaratorTree() =
		has_declarator() ? get_declarator().BindedNameOfDeclaratorTree() : null;
	
	/**
	 * Each declarator has a type and may be part of another declarator,
	 * but as no infinite types exist there must be a "root type" not being part
	 * of any other type:
	 */
	syn Type _declarator.TypeOfDeclaratorTree();
	eq _simple_declarator.TypeOfDeclaratorTree() = Type();
	eq _pointer_declarator.TypeOfDeclaratorTree() =
		has_declarator() ? get_declarator().TypeOfDeclaratorTree() : Type();
	eq _array_declarator.TypeOfDeclaratorTree() =
		has_declarator() ? get_declarator().TypeOfDeclaratorTree() : Type();
	eq _function_declarator.TypeOfDeclaratorTree() =
		has_declarator() ? get_declarator().TypeOfDeclaratorTree() : Type();
	
	/**
	 * Each declarator represents a type:
	 */
	syn lazy final Type _declarator.Type();
	eq _simple_declarator.Type() = PreviousTypePart();
	eq _pointer_declarator.Type() = get_pointer().TypeOfPointerTree();
	eq _array_declarator.Type() = new Array(
			getTypeQualifier(),
			/**element type:*/PreviousTypePart(),
			getDimension());
	eq _function_declarator.Type() =
		(has_parameter_type_list() ? (
			get_parameter_type_list().getIsVariadicFunction() ?
					new VariadicFunction(
							new List(), // Function types itself are never qualified.
							/**return type:*/PreviousTypePart(),
							Parameters()) :
					new NormalFunction(
							new List(), // Function types itself are never qualified.
							/**return type:*/PreviousTypePart(),
							Parameters())) :
			new NormalFunction(
					new List(), // Function types itself are never qualified.
					/**return type:*/PreviousTypePart(),
					Parameters()));
	
	/**
	 * Compute the type represented by a pointer:
	 */
	syn Pointer _pointer.TypeOfPointerTree() = has_pointer() ?
			get_pointer().TypeOfPointerTree() :
			Type();
	
	inh lazy final Pointer _pointer.Type();
	eq _pointer_declarator.get_pointer().Type() = new Pointer(
			get_pointer().getTypeQualifier(),
			PreviousTypePart());
	eq _pointer.get_pointer().Type() = new Pointer(
			get_pointer().getTypeQualifier(),
			Type());
	
	/**
	 * Compute types, which are specified before a declarator, but are still
	 * part of a declarators type.
	 * 
	 * IMPORTANT: To prevent redeclaration errors of tags, it is important to
	 * transform taged types (enumeration, structure or union) defined in a list
	 * of _declaration_specifiers, _specifier_qualifier or _type_specifier to
	 * references to the type (EnumTypeReference, StructureTypeReference,
	 * UnionTypeReference) if such a taged type is the previous type part of a
	 * construct which may declare more than one entity. E.g. a declaration or a
	 * _struct_declaration may contain an arbitrary number of declarators, which
	 * all share the same _specifier_qualifier list. If each declarator's type would
	 * have a copy of the real taged type defined in the _specifier_qualifier list,
	 * a redeclaration error for the tag would result.
	 */
	inh Type _declarator.PreviousTypePart();
	eq _init_declarator.get_declarator().PreviousTypePart() =
		TypeSpecifierType();
	eq _function_definition.get_declarator().PreviousTypePart() =
		TypeSpecifierType();
	eq _parameter_declaration.get_declarator().PreviousTypePart() =
		TypeSpecifierType();
	eq _pointer_declarator.get_declarator().PreviousTypePart() = Type();
	eq _array_declarator.get_declarator().PreviousTypePart() = Type();
	eq _function_declarator.get_declarator().PreviousTypePart() = Type();
	eq _normal_struct_declarator.get_declarator().PreviousTypePart() =
		TypeSpecifierType();
	eq _bitfield_struct_declarator.get_declarator().PreviousTypePart() =
		TypeSpecifierType();
	eq _type_name.get_declarator().PreviousTypePart() =
		TypeSpecifierType();
	
/* ******************************************************* SPECIFIER/QUALIFIER ******************************************************* */
	
	/**
	 * Compute the type defined by a node's _declaration_specifiers,
	 * _specifier_qualifier or _type_specifier list:
	 */
	syn Type _declaration.TypeSpecifierType() =
		DeclarationSpecifiersBuilder().buildType();
	syn Type _function_definition.TypeSpecifierType() =
		DeclarationSpecifiersBuilder().buildType();
	syn Type _parameter_declaration.TypeSpecifierType() =
		DeclarationSpecifiersBuilder().buildType();
	syn Type _struct_declaration.TypeSpecifierType() =
		DeclarationSpecifiersBuilder().buildType();
	syn Type _type_name.TypeSpecifierType() =
		DeclarationSpecifiersBuilder().buildType();
	
	/**
	 * Distribute type parts specified by a node's declaration_specifiers,
	 * _specifier_qualifier or _type_specifier list:
	 */
	inh lazy final Type _init_declarator.TypeSpecifierType();
	eq _declaration.get_init_declarator(int index).TypeSpecifierType() =
		TypeSpecifierType() instanceof TagedType ?
				// We have to consider special rules for taged types:
				(index == 0 ?
						(((TagedType)TypeSpecifierType()).IsIncompleteType() ?
								// The C source code
								// struct s e;
								// does not introduce a new incomplete structure s and an entity of this type,
								// instead it introduces a new entity e, which type is the one of a structure
								// defined before:
								((TagedType)TypeSpecifierType()).buildQualifiedReference() :
								// The C source code
								// struct s {int i;} e;
								// introduces a new structured type s and an enity e of type struct s:
								TypeSpecifierType()
						) :
						// Each declarator of a _declaration, except the first one, must only contain
						// taged type references for a tag declared in the _declaration's
						// _declaration_specifiers list. E.g. in
						// struct s {int i;} e1, e2;
						// the entity e2 will be defined using a reference to the structure s,
						// so the source code is normalized to
						// struct s {int i;} e1;
						// struct s e2;
						((TagedType)TypeSpecifierType()).buildQualifiedReference()) :
				// There are no special rules for other types than taged ones:
				TypeSpecifierType();
	
	inh lazy final Type _struct_declarator.TypeSpecifierType();
	eq _struct_declaration.get_struct_declarator(int index).TypeSpecifierType() =
		TypeSpecifierType() instanceof TagedType ?
				(index == 0 ?
						(((TagedType)TypeSpecifierType()).IsIncompleteType() ?
								((TagedType)TypeSpecifierType()).buildQualifiedReference() :
								TypeSpecifierType()
						) :
						((TagedType)TypeSpecifierType()).buildQualifiedReference()) :
				TypeSpecifierType();
	
	/**
	 * Compute the type qualifiers defined by a node's _declaration_specifiers,
	 * _specifier_qualifier or _type_qualifier list:
	 */
	syn List<TypeQualifier> _struct_declaration.TypeQualifier() =
		DeclarationSpecifiersBuilder().buildTypeQualifier();
	syn List<TypeQualifier> _type_name.TypeQualifier() =
		DeclarationSpecifiersBuilder().buildTypeQualifier();
	syn List<TypeQualifier> _declaration.TypeQualifier() =
		DeclarationSpecifiersBuilder().buildTypeQualifier();
	syn List<TypeQualifier> _function_definition.TypeQualifier() =
		DeclarationSpecifiersBuilder().buildTypeQualifier();
	syn List<TypeQualifier> _parameter_declaration.TypeQualifier() =
		DeclarationSpecifiersBuilder().buildTypeQualifier();
	
	/**
	 * Distribute type qualifiers defined by a node's _declaration_specifiers,
	 * _specifier_qualifier or _type_qualifier list:
	 */
	inh List<TypeQualifier> _type_specifier.TypeQualifier();
	eq _declaration.get_declaration_specifiers(int index).TypeQualifier() =
		TypeQualifier();
	eq _function_definition.get_declaration_specifiers(int index).TypeQualifier() =
		TypeQualifier();
	eq _parameter_declaration.get_declaration_specifiers(int index).TypeQualifier() =
		TypeQualifier();
	eq _struct_declaration.get_specifier_qualifier(int index).TypeQualifier() =
		TypeQualifier();
	eq _type_name.get_specifier_qualifier(int index).TypeQualifier() =
		TypeQualifier();
	
	/**
	 * Compute the storage class defined by a node's _declaration_specifiers or
	 * _storage_class_specifier list:
	 */
	syn List<StorageClassSpecifier> _declaration.StorageClassSpecifier() =
		DeclarationSpecifiersBuilder().buildStorageClassSpecifier();
	syn List<StorageClassSpecifier> _function_definition.StorageClassSpecifier() =
		DeclarationSpecifiersBuilder().buildStorageClassSpecifier();
	syn List<StorageClassSpecifier> _parameter_declaration.StorageClassSpecifier() =
		DeclarationSpecifiersBuilder().buildStorageClassSpecifier();
	
	/**
	 * Distribute the storage class defined by a node's _declaration_specifiers or
	 * _storage_class_specifier list:
	 */
	inh List<StorageClassSpecifier> _init_declarator.StorageClassSpecifier();
	eq _declaration.get_init_declarator(int index).StorageClassSpecifier() =
		StorageClassSpecifier();
	
	/**
	 * Compute the function specifier defined by a node's _declaration_specifiers or
	 * _function_specifier list:
	 */
	syn List<FunctionSpecifier> _declaration.FunctionSpecifier() =
		DeclarationSpecifiersBuilder().buildFunctionSpecifier();
	syn List<FunctionSpecifier> _function_definition.FunctionSpecifier() =
		DeclarationSpecifiersBuilder().buildFunctionSpecifier();
	syn List<FunctionSpecifier> _parameter_declaration.FunctionSpecifier() =
		DeclarationSpecifiersBuilder().buildFunctionSpecifier();
	
	/**
	 * Distribute the function specifier defined by a node's _declaration_specifiers or
	 * _function_specifier list:
	 */
	inh List<FunctionSpecifier> _init_declarator.FunctionSpecifier();
	eq _declaration.get_init_declarator(int index).FunctionSpecifier() =
		FunctionSpecifier();
	
/* ******************************************************** FUNCTION PARAMETERS ****************************************************** */
	
	/**
	 * Compute the parameters of a function type:
	 */
	syn lazy final List<Declaration> _function_declarator.Parameters() =
		has_parameter_type_list() ?
				get_parameter_type_list().Parameters() :
				new List<Declaration>();
	syn lazy final List<Declaration> _parameter_type_list.Parameters() {
		List<Declaration> result = new List<Declaration>();
		for (int i = 0; i < getNum_parameter_declaration(); i++)
			result.add(get_parameter_declaration(i).Declaration());
		return result;
	}
	
	/**
	 * Compute the declaration represented by a _parameter_declaration:
	 */
	syn lazy final Declaration _parameter_declaration.Declaration() {
		Opt name;
		if (has_declarator() && !get_declarator().IsAbstractDeclarator())
			name = new Opt(get_declarator().BindedNameOfDeclaratorTree());
		else name = new Opt();
		Type type;
		if (has_declarator())
			type = get_declarator().TypeOfDeclaratorTree();
		else type = TypeSpecifierType();
		return new Declaration(
				StorageClassSpecifier(),
				FunctionSpecifier(),
				type,
				name,
				new Opt());
	}
	
/* ******************************************************** STRUCTURES/UNIONS ******************************************************** */
	
	/**
	 * Compute the structure or union defined by a _struct_or_union_specifier:
	 */
	syn lazy final StructuredType _struct_or_union_specifier.StructuredType() {
		List<UnionOrStructureElement> elements = new List<UnionOrStructureElement>();
		for (int i = 0; i < getNum_struct_declaration(); i++) {
			for (UnionOrStructureElement elem:get_struct_declaration(i).UnionOrStructureElements())
				elements.add(elem);
		}
		if (getTag().getNumChild() == 0)
			getTag().addChild(new Identifier(CompilationRootNode().buildAnonymousTag()));
		if (get_struct_or_union() instanceof _struct) {
			return new Structure(
					TypeQualifier(),
					getTag(),
					elements);
		} else if (get_struct_or_union() instanceof _union) {
			return new Union(
					TypeQualifier(),
					getTag(),
					elements);
		} else throw new jastaddc.semantics.ConcreteToASTFailure(
				get_struct_or_union(),
				null,
				"The structured type ["+ get_struct_or_union().getClass().getName() +
				"] is unknown and can not be mapped to a ["+ StructuredType.class.getName() +"].\n\t"+
				"Complete the [syn StructuredType _struct_or_union_specifier.StructuredType()] attribute.");
	}
	
	/**
	 * Compute the members declared in a declaration being part of a structure or union:
	 */
	syn java.util.List<UnionOrStructureElement> _struct_declaration.UnionOrStructureElements() {
		java.util.List<UnionOrStructureElement> result =
			new java.util.LinkedList<UnionOrStructureElement>();
		for (int i = 0; i < getNum_struct_declarator(); i++)
			result.add(get_struct_declarator(i).UnionOrStructureElement());
		return result;
	}
	
	/**
	 * Compute the type and binding of a structure or union element:
	 */
	syn lazy final UnionOrStructureElement _struct_declarator.UnionOrStructureElement();
	eq _normal_struct_declarator.UnionOrStructureElement() {
		if (get_declarator().IsAbstractDeclarator())
			throw new jastaddc.syntax.SyntacticalFailure(
					"PARSER-CONSTRAINT: The intermediate _declarator child node of a _struct_declarator must not represent an abstract declarator.\n\t"+
					"Check your parser implementation.");
		return new NormalUnionOrStructureElement(
				get_declarator().TypeOfDeclaratorTree(),
				get_declarator().BindedNameOfDeclaratorTree());
	}
	eq _bitfield_struct_declarator.UnionOrStructureElement() {
		Opt bindedName;
		if (has_declarator() && !get_declarator().IsAbstractDeclarator())
			bindedName = new Opt(get_declarator().BindedNameOfDeclaratorTree());
		else bindedName = new Opt();
		Type type;
		if (has_declarator())
			type = get_declarator().TypeOfDeclaratorTree();
		else type = TypeSpecifierType();
		return new BitField(type, bindedName, getBitFieldSize());
	}
	
/* *********************************************************** ENUMERATIONS ********************************************************** */
	
	/**
	 * Compute the enumeration represented by an _enum_specifier:
	 */
	syn lazy final Enumeration _enum_specifier.Enumeration() {
		if (getTag().getNumChild() == 0)
			getTag().addChild(new Identifier(CompilationRootNode().buildAnonymousTag()));
		return new Enumeration(TypeQualifier(), getTag(), get_enumerators());
	}
	
/* *********************************************************** TYPEDEF NAMES ********************************************************* */
	/**
	 * Compute the type represented by a _typedef_name:
	 */
	syn lazy final TypedefTypeReference _typedef_name.TypedefTypeReference() =
		new TypedefTypeReference(TypeQualifier(), getName());

/* ************************************************************ TYPE NAMES *********************************************************** */
	
	/**
	 * Compute the type represented by a _type_name:
	 */
	syn Type _type_name.Type() =
		has_declarator() ? get_declarator().TypeOfDeclaratorTree() : TypeSpecifierType();
		
/* *********************************************************** DECLARATIONS ********************************************************** */
	
	/**
	 * Compute the declaration represented by an _init_declarator:
	 */
	syn lazy final Declaration _init_declarator.Declaration() {
		if (get_declarator().IsAbstractDeclarator())
			throw new jastaddc.syntax.SyntacticalFailure(
					"PARSER-CONSTRAINT: The intermediate _init_declarator child node of a _declaration must not represent an abstract declarator.\n\t"+
					"Check your parser implementation.");
		return new Declaration(
					StorageClassSpecifier(),
					FunctionSpecifier(),
					get_declarator().TypeOfDeclaratorTree(),
					new Opt<Identifier>(get_declarator().BindedNameOfDeclaratorTree()),
					getInitializer());
	}
	
	/**
	 * Compute the declarations represented by a _declaration:
	 */
	syn lazy final DeclarationCollection _declaration.DeclarationCollection() {
		List<Declaration> decls = new List<Declaration>();
		// Only a taged type or an incomplete type may be declared, e.g. the declarations
		// struct {int i;};
		// struct s;
		if (getNum_init_declarator() == 0) {
			decls.add(new Declaration(
					StorageClassSpecifier(),
					FunctionSpecifier(),
					TypeSpecifierType(), /* May be incomplete type, e.g.: struct s; */
					new Opt(),
					new Opt()));
		}
		// Add all the entities declared:
		for (int i = 0; i < getNum_init_declarator(); i++)
			decls.add(get_init_declarator(i).Declaration());
		return new DeclarationCollection(decls);
	}
	
/* ******************************************************* FUNCTION DEFINITIONS ****************************************************** */
	
	syn lazy final DeclarationCollection _function_definition.DeclarationCollection() {
		if (get_declarator().IsAbstractDeclarator())
			throw new jastaddc.syntax.SyntacticalFailure(
					"PARSER-CONSTRAINT: The intermediate _declarator child node of a _function_definition must not represent an abstract declarator.\n\t"+
					"Check your parser implementation.");
		return new DeclarationCollection(new List<Declaration>().add(
				new Declaration(
						StorageClassSpecifier(),
						FunctionSpecifier(),
						get_declarator().TypeOfDeclaratorTree(),
						new Opt(get_declarator().BindedNameOfDeclaratorTree()),
						new Opt(new FunctionDefinitionInitializer(getBody())))));
	}
}
