/*
	This program and the accompanying materials are made available under the
	terms of the MIT license (X11 license) which accompanies this distribution.
	
	Author: Christoff Bürger
*/

/**
 * This aspect imposes a control flow graph on top of the AST. It is
 * similar to the concepts described in the paper "Declarative
 * Intraprocedural Flow Analysis of Java Source Code" by Emma Nilsson-Nyman,
 * Görel Hedin, Eva Magnusson and Torbjörn Ekman.
 * 
 * The idea is, to support control flow graphs for functions. Each function
 * statement has a set of possible successor statements. Each successor
 * statement may be executed next after executing it's predecessor statement.
 * To explicitely provide a control flow root and a termination node, for a
 * functions control flow graph, a control flow entry and a exit node are
 * added to each function.
 */
aspect ControlFlow {
	// Helper attribute, representing the next statement in the current context:
	inh java.util.Set<Statement> Statement.ControlFlowFollowing();
	// Attribute specifying all the statements, which might be executed next after
	// executing this statement:
	syn java.util.Set<Statement> Statement.ControlFlowSuccessor() =
		ControlFlowFollowing();
	coll java.util.Set<Statement> Statement.ControlFlowPredecessor()
		[new java.util.HashSet<Statement>()] with add;
	
	// Specifying the predecessors as the invers of the successors:
	Statement contributes this to Statement.ControlFlowPredecessor()
		for each ControlFlowSuccessor();
	
	// Introduce artifical entry and exit methods to function definitions:
	syn nta lazy Statement FunctionDefinitionInitializer.ControlFlowEntryNode() =
		new EmptyStatement();
	syn nta lazy Statement FunctionDefinitionInitializer.ControlFlowExitNode() =
		new EmptyStatement();
	
	// Connect the artifical function entry and exit nodes with the function implementation:
	eq FunctionDefinitionInitializer.ControlFlowEntryNode().ControlFlowFollowing() =
		SetOp.union(new java.util.HashSet<Statement>(), getBody());
	eq FunctionDefinitionInitializer.getBody().ControlFlowFollowing() =
		SetOp.union(new java.util.HashSet<Statement>(), ControlFlowExitNode());
	
	/** Specify control flow for nodes different from the default behavior */
	
	eq CompoundStatement.ControlFlowSuccessor() =
		getNumStatement() != 0 ?
				SetOp.union(new java.util.HashSet<Statement>(), getStatement(0)) :
				ControlFlowFollowing();
	eq CompoundStatement.getStatement(int index).ControlFlowFollowing() =
		index != getNumStatement() - 1 ?
				SetOp.union(new java.util.HashSet<Statement>(), getStatement(index + 1)) :
				ControlFlowFollowing();
	
	eq IfStatement.ControlFlowSuccessor() = hasAlternative() ?
			SetOp.union(getBody(), getAlternative()) :
			SetOp.union(getBody(), ControlFlowFollowing());
	
	eq SwitchStatement.ControlFlowSuccessor() {
		java.util.Set<Statement> result = new java.util.HashSet<Statement>();
		for (Statement stmt:AssociatedLabels())
			result = SetOp.union(result, stmt);
		return SetOp.union(result, ControlFlowFollowing());
	}
			
	eq WhileStatement.ControlFlowSuccessor() =
		SetOp.union(getBody(), ControlFlowFollowing());
	eq WhileStatement.getBody().ControlFlowFollowing() =
		SetOp.union(new java.util.HashSet<Statement>(), this);
	
	eq DoWhileStatement.ControlFlowSuccessor() =
		SetOp.union(getBody(), ControlFlowFollowing());
	eq DoWhileStatement.getBody().ControlFlowFollowing() =
		SetOp.union(new java.util.HashSet<Statement>(), this);
	
	eq ForStatement.ControlFlowSuccessor() =
		SetOp.union(getBody(), ControlFlowFollowing());
	eq ForStatement.getBody().ControlFlowFollowing() =
		SetOp.union(new java.util.HashSet<Statement>(), this);
	
	eq ForStatement_Decl.ControlFlowSuccessor() =
		SetOp.union(getBody(), ControlFlowFollowing());
	eq ForStatement_Decl.getBody().ControlFlowFollowing() =
		SetOp.union(new java.util.HashSet<Statement>(), this);
	
	eq GotoJump.ControlFlowSuccessor() =
		SetOp.union(new java.util.HashSet<Statement>(), ReferencedStatement());
	
	eq ContinueJump.ControlFlowSuccessor() =
		SetOp.union(new java.util.HashSet<Statement>(), ReferencedLoop());
	
	eq BreakJump.ControlFlowSuccessor() =
		ReferencedConditionalControlFlowStatement().ControlFlowFollowing();
	
	eq ReturnJump.ControlFlowSuccessor() =
		SetOp.union(new java.util.HashSet<Statement>(),
				ReferencedFunctionDefinition().ControlFlowExitNode());
}
