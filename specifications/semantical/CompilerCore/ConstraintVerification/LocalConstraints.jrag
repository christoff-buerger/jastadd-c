/**
 * This aspect specifies attributes for checking each semantical C99 constraint.
 * Each attribute is specified for the grammar construct associated with the
 * semantical constraint it checks.
 * 
 * @author C. BÃ¼rger
 */
aspect LocalConstraints {
	eq EnumerationElement.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		java.util.List<IOrdinaryNameDeclaration> lookedUp =
			LookUpOrdinaryName(Name());
		if (lookedUp.size() > 1) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Ordinary Namespace: Enumeration element [");
			errorM.append(Name());
			errorM.append("] declaration in [");
			errorM.append(EnumerationContainingElement().Name());
			errorM.append("].\n\t[");
			errorM.append(Name());
			errorM.append("] allready declared at ");
			errorM.append(((ASTNode)lookedUp.get(0)).sourceCodeLocation());
			errorM.append('.');
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
		
	eq TagedType.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (hasTag()) {
			java.util.List<TagedType> lookedUp =
				LookUpTag(Name());
			// If the same tag name is declared/defined for different
			// types a redeclaration error is given, e.g.
			// struct s;
			// union s; /* redeclaration */
			java.util.List<TagedType> redeclarations =
				ListFilter.filter(lookedUp,
						new TagedTypeTypeFilter(this.getClass().getName(), false));
			if (redeclarations.size() > 0) {
				StringBuilder errorM = new StringBuilder();
				errorM.append("Tag Namespace: [");
				errorM.append(Name());
				errorM.append("] declaration.\n\tTag entity of different type named [");
				errorM.append(Name());
				errorM.append("] allready declared at ");
				errorM.append(redeclarations.get(0).sourceCodeLocation());
				errorM.append('.');
				jastaddc.SourceError error =
					new jastaddc.SourceError(errorM.toString());
				error.line = line();
				error.column = column();
				error.sourceName = sourceName();
				error.errorLevel =
					jastaddc.SourceError.ErrorLevel.ERROR;
				error.errorType =
					jastaddc.SourceError.ErrorType.SEMANTICAL;
				addError(error);
				result = false;
			}
			// If the same tag entity is defined several times
			// a redeclaration error is given:
			if (!IsIncompleteType()) {
				redeclarations = ListFilter.filter(lookedUp,
						new CompleteTagedTypeFilter());
				if (redeclarations.size() > 1) {
					StringBuilder errorM = new StringBuilder();
					errorM.append("Tag Namespace: [");
					errorM.append(Name());
					errorM.append("] declaration.\n\t[");
					errorM.append(Name());
					errorM.append("] allready declared at ");
					errorM.append(redeclarations.get(0).sourceCodeLocation());
					errorM.append('.');
					jastaddc.SourceError error =
						new jastaddc.SourceError(errorM.toString());
					error.line = line();
					error.column = column();
					error.sourceName = sourceName();
					error.errorLevel =
						jastaddc.SourceError.ErrorLevel.ERROR;
					error.errorType =
						jastaddc.SourceError.ErrorType.SEMANTICAL;
					addError(error);
					result = false;
				}
			}
		}
		return result;
	}
	
	eq UnionOrStructureElement.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		UnionOrStructureElement lookedUp =
			StructuredTypeContainingMember().LookUpMember(Name());
		if (lookedUp != this) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Component Namespace: Member [");
			errorM.append(Name());
			errorM.append("] declaration in [");
			errorM.append(StructuredTypeContainingMember().Name());
			errorM.append("].\n\t[");
			errorM.append(Name());
			errorM.append("] allready declared at ");
			errorM.append(lookedUp.sourceCodeLocation());
			errorM.append('.');
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq MemberAccess.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (DesignationType().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Type: Member [");
			errorM.append(MemberName());
			errorM.append("] access.\n\tThe designation is no structured type.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		else if (MemberDeclaration().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Component Namespace: Member [");
			errorM.append(MemberName());
			errorM.append("] access.\n\tThe structured type [");
			errorM.append(DesignationType().Name());
			errorM.append("] does not contain the member [");
			errorM.append(MemberName());
			errorM.append("].");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq ArrayAccess.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (DesignationExpression().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Type: Array access.\n\tNo array designation expression given (pointer to object type).");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		if (IndexExpression().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Type: Array access.\n\tNo index expression given (integer type).");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq Declaration.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		// At most one storage class specifier may be given [6.7.1;2] S.98:
		if (getNumStorageClassSpecifier() > 1) {
			jastaddc.SourceError error = new jastaddc.SourceError(
					"At most one storage class specifier may be given.");
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel = jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType = jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		if (hasBindedName()) {
			java.util.List<IOrdinaryNameDeclaration> lookedUp =
				LookUpOrdinaryName(Name());
			if (IsFunctionDefinition()) {
				// Remove prototyps of the function from the list:
				lookedUp = ListFilter.filter(
						lookedUp,
						new FunctionPrototypFilter((FunctionType)getType().RetrieveFinalNode()));
			} else if (IsFunctionPrototyp()) {
				// Remove prototyps and definitions of the function from the list:
				lookedUp = ListFilter.filter(
						lookedUp,
						new FunctionDeclarationFilter((FunctionType)getType().RetrieveFinalNode()));
			}
			if (lookedUp.size() > 1) {
				StringBuilder errorM = new StringBuilder();
				errorM.append("Ordinary Namespace: [");
				errorM.append(Name());
				errorM.append("] declaration.\n\t[");
				errorM.append(Name());
				errorM.append("] allready declared at ");
				errorM.append(((ASTNode)lookedUp.get(0)).sourceCodeLocation());
				errorM.append('.');
				jastaddc.SourceError error =
					new jastaddc.SourceError(errorM.toString());
				error.line = line();
				error.column = column();
				error.sourceName = sourceName();
				error.errorLevel =
					jastaddc.SourceError.ErrorLevel.ERROR;
				error.errorType =
					jastaddc.SourceError.ErrorType.SEMANTICAL;
				addError(error);
				result = false;
			}
		} else if (IsFunctionDeclaration()) {
			final String decDef;
			if (IsFunctionDefinition())
				decDef = "definition";
			else decDef = "declaration";
			StringBuilder errorM = new StringBuilder();
			errorM.append("Ordinary Namespace: Function ");
			errorM.append(decDef);
			errorM.append(".\n\tThe function has no name.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		if (IsFunctionDefinition() && !IsFunctionDeclaration()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("AST Structure: Defining function implementation (body) for entity [");
			errorM.append(Name());
			errorM.append("].\n\t[");
			errorM.append(Name());
			errorM.append("] has no function type.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		if (IsFunctionDefinition() && IsFunctionDeclaration()) {
			FunctionType funcType = (FunctionType)getType().RetrieveFinalNode();
			// The declaration for each parameter shall contain an identifier,
			// except for the special case of a parameter list consisting of a
			// single parameter of type void (the special case of a function
			// without parameters [6.7.5.3:10] S. 119) [6.9.1:5] S.141.
			if (!funcType.IsParameterlessFunction()) {
				for (int i = 0; i < funcType.getNumParameter(); i++) {
					Declaration para = funcType.getParameter(i);
					if (!para.hasBindedName()) {
						StringBuilder errorM = new StringBuilder();
						errorM.append("Ordinary Namespace: Parameter declaration of function [");
						errorM.append(Name());
						errorM.append("] definition.\n\tThe [");
						errorM.append(i);
						errorM.append("]'th parameter has no name.");
						jastaddc.SourceError error =
							new jastaddc.SourceError(errorM.toString());
						error.line = para.line();
						error.column = para.column();
						error.sourceName = para.sourceName();
						error.errorLevel =
							jastaddc.SourceError.ErrorLevel.ERROR;
						error.errorType =
							jastaddc.SourceError.ErrorType.SEMANTICAL;
						addError(error);
						result = false;
					}
				}
			}
		}
		if (!IsFunctionDeclaration() && getNumFunctionSpecifier() > 0) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("AST Structure: Function specifier in [");
			errorM.append(Name());
			errorM.append("] declaration.\n\t[");
			errorM.append(Name());
			errorM.append("] has no function type.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		if (IsParameterDeclaration() == null && !hasBindedName() && !(getType().RetrieveFinalNode() instanceof TagedType)) {
			// A declaration shall declare at least a declarator, a tag,
			// or the members of an enumeration [6.7:2] p. 97:
			StringBuilder errorM = new StringBuilder();
			errorM.append("AST Structure: Declaration.\n\tThe declaration does not declare something.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq DeclarationCollection.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (getNumDeclaration() < 1) {
			throw new jastaddc.syntax.SyntacticalFailure(
					"AST Structure: A "+ this.getClass().getName() +" contains no Declaration."+
					"\n\tCheck the parser and concrete to AST mapping implementation."+
					"\n\tIt must not permit such a construct.");
		}
		return result;
	}
	
	eq ExplicitLabeledStatement.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		java.util.List<LabeledStatement> lookedUp =
			LookUpLabel(Name());
		if (lookedUp.size() > 1) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Label Namespace: [");
			errorM.append(Name());
			errorM.append("] declaration.\n\t[");
			errorM.append(Name());
			errorM.append("] allready declared at ");
			errorM.append(lookedUp.get(0).sourceCodeLocation());
			errorM.append('.');
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq Variable.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (VariableDeclaration().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Ordinary Namespace: [");
			errorM.append(Name());
			errorM.append("] usage.\n\t[");
			errorM.append(Name());
			errorM.append("] not declared.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq TypedefTypeReference.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (ReferencedTypedefDeclaration().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Ordinary Namespace: Typedefed type [");
			errorM.append(Name());
			errorM.append("] usage.\n\tTypedefed type [");
			errorM.append(Name());
			errorM.append("] not declared.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq EnumTypeReference.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (ReferencedEnumerationType().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Tag Namespace: Enumeration [");
			errorM.append(Name());
			errorM.append("] usage.\n\t[");
			errorM.append(Name());
			errorM.append("] not declared.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq StructureTypeReference.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (ReferencedStructureType().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Tag Namespace: Structure [");
			errorM.append(Name());
			errorM.append("] usage.\n\t[");
			errorM.append(Name());
			errorM.append("] not declared.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq UnionTypeReference.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (ReferencedUnionType().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Tag Namespace: Union [");
			errorM.append(Name());
			errorM.append("] usage.\n\t[");
			errorM.append(Name());
			errorM.append("] not declared.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	// TODO: several case labels with equal conditions
	eq SwitchStatement.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		java.util.List<Statement> defaults =
			new java.util.LinkedList<Statement>();
		for (Statement stmt:AssociatedLabels()) {
			if (stmt instanceof DefaultLabel)
				defaults.add(stmt);
		}
		if (defaults.size() > 1) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Labeled Namespace: Switch statement.\n\tThe switch statement has several default labels [");
			for (Statement stmt:defaults) {
				errorM.append(stmt.sourceCodeLocation());
				errorM.append(",");
			}
			errorM.append("].");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq GotoJump.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (LookUpLabel(DestinationName()).size() < 1) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Control Flow: Jump to [");
			errorM.append(DestinationName());
			errorM.append("].\n\t[");
			errorM.append(DestinationName());
			errorM.append("] not declared.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		} // else if (LookUpLabel(DestinationName()).size() > 1)
			// Label redeclaration error handeled in ExplicitLabeledStatement
		return result;
	}
	
	eq ContinueJump.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (ReferencedLoop().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Control Flow: Continue jump.\n\tThere exists no enclosing loop.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq BreakJump.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (ReferencedConditionalControlFlowStatement().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Control Flow: Break jump.\n\tThere exists no enclosing loop or switch statement.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq ReturnJump.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (ReferencedFunctionDefinition().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Control Flow: Return jump.\n\tThere exists no enclosing function definition.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
	
	eq SwitchLabelStatement.IsCorrectLocal() {
		boolean result = super.IsCorrectLocal();
		if (AssociatedSwitchStatement().IsErrorNode()) {
			StringBuilder errorM = new StringBuilder();
			errorM.append("Control Flow: Switch label.\n\tThere exists no enclosing switch statement.");
			jastaddc.SourceError error =
				new jastaddc.SourceError(errorM.toString());
			error.line = line();
			error.column = column();
			error.sourceName = sourceName();
			error.errorLevel =
				jastaddc.SourceError.ErrorLevel.ERROR;
			error.errorType =
				jastaddc.SourceError.ErrorType.SEMANTICAL;
			addError(error);
			result = false;
		}
		return result;
	}
}
